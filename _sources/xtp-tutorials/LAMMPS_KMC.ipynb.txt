{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Kinect Monte Carlo Simulations Using LAMMPS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the `bin` subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting the environment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries for plotting. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-09T06:16:38.128002Z",
     "iopub.status.busy": "2022-12-09T06:16:38.127638Z",
     "iopub.status.idle": "2022-12-09T06:16:40.039759Z",
     "shell.execute_reply": "2022-12-09T06:16:40.038188Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.11/site-packages (0.11.2)\r\n",
      "Requirement already satisfied: numpy>=1.15 in /usr/lib64/python3.11/site-packages (from seaborn) (1.22.0)\r\n",
      "Requirement already satisfied: scipy>=1.0 in /usr/lib64/python3.11/site-packages (from seaborn) (1.8.1)\r\n",
      "Requirement already satisfied: pandas>=0.23 in /usr/lib64/python3.11/site-packages (from seaborn) (1.3.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.2 in /usr/lib64/python3.11/site-packages (from seaborn) (3.6.2)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/lib64/python3.11/site-packages (from matplotlib>=2.2->seaborn) (1.0.6)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.11/site-packages (from matplotlib>=2.2->seaborn) (0.11.0)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/lib64/python3.11/site-packages (from matplotlib>=2.2->seaborn) (4.37.2)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.11/site-packages (from matplotlib>=2.2->seaborn) (1.4.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/lib/python3.11/site-packages (from matplotlib>=2.2->seaborn) (21.3)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.11/site-packages (from matplotlib>=2.2->seaborn) (9.2.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in /usr/lib/python3.11/site-packages (from matplotlib>=2.2->seaborn) (3.0.9)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/lib/python3.11/site-packages (from matplotlib>=2.2->seaborn) (2.8.2)\r\n",
      "Requirement already satisfied: pytz>=2017.3 in /usr/lib/python3.11/site-packages (from pandas>=0.23->seaborn) (2022.6)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib>=2.2->seaborn) (1.16.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Notes\n",
    "> * The `${VOTCASHARE}` environmental variable is set to the path that you provided during the VOTCA installation, by the default is set to `/usr/local/votca`.\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Check the mapping\n",
    "\n",
    "Let us first output `.pdb` files for the segments, qmmolecules and classical segments in order to check the mapping."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to update the `mapchecker` options."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can run the checker as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-09T06:16:40.046221Z",
     "iopub.status.busy": "2022-12-09T06:16:40.045730Z",
     "iopub.status.idle": "2022-12-09T06:16:42.305803Z",
     "shell.execute_reply": "2022-12-09T06:16:42.304036Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_run, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 06:03:45)\r\n",
      "votca_csg, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 05:44:53)\r\n",
      "votca_tools, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 05:41:25)\r\n",
      "\r\n",
      "Initializing calculator\r\n",
      "... mapchecker\r\n",
      "1 frames in statefile, Ids are: 10000 \r\n",
      "Starting at frame 10000\r\n",
      "Evaluating frame 10000\r\n",
      "Import MD Topology (i.e. frame 10000) from state.hdf5\r\n",
      ".... \r\n",
      "... mapchecker\r\n",
      " Using 1 threads\r\n",
      "Writing segments to md_segments_step_10000.pdb\r\n",
      "Writing qmmolecules to qm_segments_n_step_10000.pdb\r\n",
      "Writing polarsegments to mp_segments_e_step_10000.pdb\r\n",
      "Writing polarsegments to mp_segments_h_step_10000.pdb\r\n",
      "Changes have not been written to state file.\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_run -e mapchecker -c map_file=system.xml -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Site energies and pair energy differences\n",
    "We will compute the histrogram using `resolution_sites` of 0.03 eV. See [eanalyze options and defaults](https://votca.github.io/xtp/eanalyze.html) for more information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-09T06:16:42.312824Z",
     "iopub.status.busy": "2022-12-09T06:16:42.312240Z",
     "iopub.status.idle": "2022-12-09T06:16:43.961837Z",
     "shell.execute_reply": "2022-12-09T06:16:43.960358Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_run, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 06:03:45)\r\n",
      "votca_csg, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 05:44:53)\r\n",
      "votca_tools, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 05:41:25)\r\n",
      "\r\n",
      "Initializing calculator\r\n",
      "... eanalyze\r\n",
      "1 frames in statefile, Ids are: 10000 \r\n",
      "Starting at frame 10000\r\n",
      "Evaluating frame 10000\r\n",
      "Import MD Topology (i.e. frame 10000) from state.hdf5\r\n",
      ".... \r\n",
      "... eanalyze\r\n",
      " Using 1 threads\r\n",
      "... ... Short-listed 1000 segments (pattern='*')\r\n",
      "... ... ... NOTE Statistics of site energies and spatial correlations thereof are based on the short-listed segments only. \r\n",
      "... ... ...      Statistics of site-energy differences operate on the full list.\r\n",
      "... ... excited state e\r\n",
      "... ... excited state h\r\n",
      "... ... excited state s\r\n",
      "... ... excited state t\r\n",
      "Changes have not been written to state file.\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_run -e eanalyze -c resolution_sites=0.03 -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the current work directoy you can see the resulting files,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-09T06:16:43.967429Z",
     "iopub.status.busy": "2022-12-09T06:16:43.966674Z",
     "iopub.status.idle": "2022-12-09T06:16:44.089386Z",
     "shell.execute_reply": "2022-12-09T06:16:44.087700Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eanalyze.pairhist_e.out  eanalyze.pairlist_s.out  eanalyze.sitehist_e.out\r\n",
      "eanalyze.pairhist_h.out  eanalyze.pairlist_t.out  eanalyze.sitehist_h.out\r\n",
      "eanalyze.pairhist_s.out  eanalyze.sitecorr_e.out  eanalyze.sitehist_s.out\r\n",
      "eanalyze.pairhist_t.out  eanalyze.sitecorr_h.out  eanalyze.sitehist_t.out\r\n",
      "eanalyze.pairlist_e.out  eanalyze.sitecorr_s.out\r\n",
      "eanalyze.pairlist_h.out  eanalyze.sitecorr_t.out\r\n"
     ]
    }
   ],
   "source": [
    "!ls eanalyze*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting the energies\n",
    "We will the previously installed `pandas` and `seaborn` library to plot the electron histrogram computed in the previous step,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-09T06:16:44.097431Z",
     "iopub.status.busy": "2022-12-09T06:16:44.096481Z",
     "iopub.status.idle": "2022-12-09T06:16:46.628259Z",
     "shell.execute_reply": "2022-12-09T06:16:46.627136Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"counts\"] \n",
    "df = pd.read_table(\"eanalyze.pairhist_e.out\", comment=\"#\", sep='\\s+',names=columns, skiprows=2) \n",
    "sns.relplot(x=\"E(eV)\", y=\"counts\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Couplings histrogram\n",
    "In this step we will analyze the electron/hole couplings, using the `ianalyze` calculator using the `resolution_logJ2` parameter of 0.1 units. See the [ianalyze options and defaults](https://votca.github.io/xtp/ianalyze.html) for more information about the calculator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-09T06:16:46.636053Z",
     "iopub.status.busy": "2022-12-09T06:16:46.634323Z",
     "iopub.status.idle": "2022-12-09T06:16:48.210304Z",
     "shell.execute_reply": "2022-12-09T06:16:48.208594Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_run, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 06:03:45)\r\n",
      "votca_csg, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 05:44:53)\r\n",
      "votca_tools, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 05:41:25)\r\n",
      "\r\n",
      "Initializing calculator\r\n",
      "... ianalyze\r\n",
      "1 frames in statefile, Ids are: 10000 \r\n",
      "Starting at frame 10000\r\n",
      "Evaluating frame 10000\r\n",
      "Import MD Topology (i.e. frame 10000) from state.hdf5\r\n",
      ".... \r\n",
      "... ianalyze\r\n",
      " Using 1 threads\r\n",
      "Calculating for state e now.\r\n",
      "Calculating for state h now.\r\n",
      "Changes have not been written to state file.\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_run -e ianalyze -c resolution_logJ2=0.1 states=e,h -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting the coupling histogram\n",
    "We can now plot the logarithm of the squared coupling for the hole,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-09T06:16:48.218952Z",
     "iopub.status.busy": "2022-12-09T06:16:48.218208Z",
     "iopub.status.idle": "2022-12-09T06:16:48.467411Z",
     "shell.execute_reply": "2022-12-09T06:16:48.466763Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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AzVRDzdlyhTMmzcv3MMgohYwUBNRSK1YscJvm9uPP/4Y06dPR0ZGBhITEzFx4kR888034RsgUZRhoCaiLrV+/XpMnz4dX375JQoKCjB16lRcfvnl2LFjR7iHRhQVGKiJSFFdXY1bbrkFKSkpMBqNmDlzJg4dOuR3z5tvvom8vDwYjUb86le/wuLFi1s9KGbJkiV49NFHcdZZZyE/Px8LFy5Efn4+Pvvssy5+N0SxgYGaiBS33XYbtm3bhk8//RSbN2+GKIq49NJL4XA4AAAbN27E3Xffjfvvvx87d+7E9OnT2308qdvtRl1dHVJTU7viLRDFHB5zSUQAgEOHDuHTTz/Fxo0bMWnSJADA//t//w95eXn45JNPMHv2bCxduhQzZ87Eww8/DAAYPHgwNm3ahM8//zzon/PSSy+hoaEB11xzTZe8D6JYw4yaiAAA+/btg0ajwYQJE5RraWlpGDJkCPbt2wcAOHDgAM4++2y/5wV+35r33nsPCxYswAcffIDMzMzQDJwoxjGjJiIAQEsn3oqiCEEQmvy5recF+uCDDzBnzhz8+9//xrRp0zo3WKIehBk1EQEAhg8fDqfTif/+97/KtcrKShw8eBDDhg0DAAwdOhRbtmzxe962bdvafO333nsPt912G1auXInLLrsstAMninEM1EQEAMjPz8eVV16JO++8Exs2bMCuXbtw0003oVevXrjyyisBAPfddx++/PJLLF68GIcOHcLrr7+Or776qkmW7eu9997DLbfcgpdeegnnnHMOSktLUVpaitra2u56a0RRjYGaiBTLly/H+PHjMWvWLEycOBGiKOLLL7+EVqsFAJx77rl47bXXsHjxYowePRpff/01HnjgAej1euU13G43NBrvrNrrr78Op9OJe+65Bzk5OcrX/fff3+3vjygaCWKwE0xERM248847sX//fvz4448AgD//+c949913sXv37jCPjCg2sJmMiNrlr3/9K6ZPnw6TyYSvvvoKb7/9Nl555RVYLBbs378fy5cvx8yZM8M9TKKYwdI3EbXLli1bMH36dIwaNQqvvfYa/v73v+OOO+7AG2+8gWnTpmH06NF46qmnwj1MopjB0jcREVEEY0ZNREQUwRioiYiIIhgDNRERUQRjoCYiIopgDNREREQRjIGaiIgogjFQExERRTAGaiIiogjGQE1ERBTB/j+g3yQMm1EQrQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "columns = [\"logJ2\", \"counts\"] \n",
    "df = pd.read_table(\"ianalyze.ihist_h.out\", comment=\"#\", sep='\\s+',names=columns, skiprows=2) \n",
    "sns.relplot(x=\"logJ2\", y=\"counts\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KMC simulations of multiple holes or electrons in periodic boundary conditions\n",
    "Finally, lets do a 1000 seconds KMC simulation for the electron, with a 10 seconds window between output and a field of 10 *V/m* along the x-axis,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-09T06:16:48.478380Z",
     "iopub.status.busy": "2022-12-09T06:16:48.477490Z",
     "iopub.status.idle": "2022-12-09T06:16:50.046265Z",
     "shell.execute_reply": "2022-12-09T06:16:50.044783Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_run, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 06:03:45)\r\n",
      "votca_csg, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 05:44:53)\r\n",
      "votca_tools, version 2023-dev gitid: 9140004 (compiled Dec  9 2022, 05:41:25)\r\n",
      "\r\n",
      "Initializing calculator\r\n",
      "... kmcmultiple\r\n",
      "1 frames in statefile, Ids are: 10000 \r\n",
      "Starting at frame 10000\r\n",
      "Evaluating frame 10000\r\n",
      "Import MD Topology (i.e. frame 10000) from state.hdf5\r\n",
      ".... \r\n",
      "... kmcmultiple\r\n",
      " Using 1 threads\r\n",
      " ... \r\n",
      "-----------------------------------\r\n",
      "      KMC FOR MULTIPLE CHARGES\r\n",
      "-----------------------------------\r\n",
      "\r\n",
      " ... \r\n",
      "Calculating initial rates.\r\n",
      " ... Rate engine initialized:\r\n",
      " Ratetype:marcus\r\n",
      " Temperature T[k] = 300\r\n",
      " Electric field[V/nm](x,y,z) =1e-08 0 0 ||F|| 1e-08\r\n",
      "\r\n",
      " ... \r\n",
      " ...     carriertype: electron\r\n",
      " ...     Rates for 1000 sites are computed.\r\n",
      " ... \r\n",
      "Rates are written to rates.dat\r\n",
      " ... Nblist has 10151 pairs. Nodes contain 20302 jump events\r\n",
      "with avg=20.302 std=2.07913 max=28 min=14 jumps per site\r\n",
      "Minimum jumpdistance =0.366063 nm Maximum distance =1.10167 nm\r\n",
      "\r\n",
      " ... spatial carrier density: 0.00729374 nm^-3\r\n",
      " ... \r\n",
      "Algorithm: VSSM for Multiple Charges\r\n",
      " ... number of carriers: 1\r\n",
      " ... number of nodes: 1000\r\n",
      " ... stop condition: 1000 steps.\r\n",
      " ... output frequency: every 10 steps.\r\n",
      " ... (If you specify runtimes larger than 100 kmcmultiple assumes that you are specifying the number of steps for both runtime and outputtime.)\r\n",
      " ... Writing trajectory to trajectory.csv.\r\n",
      " ... looking for injectable nodes...\r\n",
      " ... starting position for charge 0: segment 697\r\n",
      " ... \r\n",
      "Occupations are written to occupation.dat\r\n",
      " ... \r\n",
      "finished KMC simulation after 1000 steps.\r\n",
      "simulated time 5.92255e-09 seconds.\r\n",
      "\r\n",
      " ...     carrier 1: 1.205058e+08 5.671523e+07 1.959596e+07\r\n",
      " ...   Overall average velocity (nm/s): 1.205058e+08 5.671523e+07 1.959596e+07\r\n",
      " ... \r\n",
      "Distances travelled (nm): \r\n",
      " ...     carrier 1: 7.137019e-01 3.358990e-01 1.160581e-01\r\n",
      " ... \r\n",
      "Mobilities (nm^2/Vs): \r\n",
      " ...     carrier 1: mu=1.205058e+16\r\n",
      " ...   Overall average mobility in field direction <mu>=1.205058e+16 nm^2/Vs  \r\n",
      " ... \r\n",
      "Eigenvalues:\r\n",
      " \r\n",
      " ... Eigenvalue: 2.670560e-09\r\n",
      " ... Eigenvector: 1.317081e-01   6.198754e-02   -9.893485e-01\r\n",
      "\r\n",
      " ... Eigenvalue: 2.670560e-09\r\n",
      " ... Eigenvector: 4.258378e-01   -9.047995e-01   0.000000e+00\r\n",
      "\r\n",
      " ... Eigenvalue: 5.366503e+07\r\n",
      " ... Eigenvector: -8.951621e-01   -4.213020e-01   -1.455661e-01\r\n",
      "Changes have not been written to state file.\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_run -e kmcmultiple -c runtime=1000 outputtime=10 field=10,0,0 carriertype=electron -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can find both the *occupation data* and the *rates* for the electron at 300 K, on files `occupation.dat`  and `rates.dat`, respectively."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
