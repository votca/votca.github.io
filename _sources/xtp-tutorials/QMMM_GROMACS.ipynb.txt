{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# QMMM workflow using GROMACS and VOTCA-XTP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What is this tutorial about\n",
    "In this tutorial, we will learn how to set and perform excited state calculation using the Votca XTP library. We will use methane as our QM region."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/sphinx/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "The XTP package offers the following command line interface that the user can interact with:\n",
    "* [xtp_map](https://www.votca.org/xtp/xtp_map.html)\n",
    "* [xtp_parallel](https://www.votca.org/xtp/xtp_parallel.html)\n",
    "* [xtp_run](https://www.votca.org/xtp/xtp_run.html)\n",
    "* [xtp_tools](https://www.votca.org/xtp/xtp_tools.html)\n",
    "\n",
    "Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:44:59.726619Z",
     "iopub.status.busy": "2025-11-01T04:44:59.726445Z",
     "iopub.status.idle": "2025-11-01T04:44:59.858572Z",
     "shell.execute_reply": "2025-11-01T04:44:59.858034Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_tools, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          Tool user options.\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "  -e [ --execute ] arg        Name of Tool to run\r\n",
      "  -l [ --list ]               Lists all available Tools\r\n",
      "  -d [ --description ] arg    Short description of a Tools\r\n",
      "  -c [ --cmdoptions ] arg     Modify options via command line by e.g. '-c \r\n",
      "                              xmltag.subtag=value'. Use whitespace to separate \r\n",
      "                              multiple options\r\n",
      "  -p [ --printoptions ] arg   Prints xml options of a Tool\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools -h"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting the environment\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remove previous hdf5 file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:44:59.861645Z",
     "iopub.status.busy": "2025-11-01T04:44:59.861449Z",
     "iopub.status.idle": "2025-11-01T04:44:59.971808Z",
     "shell.execute_reply": "2025-11-01T04:44:59.971235Z"
    }
   },
   "outputs": [],
   "source": [
    "!rm -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate the topology from the Gromacs file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "runs the mapping from MD coordinates to segments and creates an [hdf5 file](https://www.hdfgroup.org/solutions/hdf5/). You can explore the generated `state.hdf5` file with e.g. hdf5itebrowser. In Python, you can use the [h5py library](https://www.h5py.org/)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:44:59.974791Z",
     "iopub.status.busy": "2025-11-01T04:44:59.974607Z",
     "iopub.status.idle": "2025-11-01T04:45:00.103237Z",
     "shell.execute_reply": "2025-11-01T04:45:00.102670Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_map, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Error 'tpr' file format of file 'MD_FILES/topol.tpr' cannot be read or written\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_map -t MD_FILES/topol.tpr -c MD_FILES/conf.gro -s system.xml -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Check the mapping\n",
    "\n",
    "Let us first output `.pdb` files for the segments, qmmolecules and classical segments in order to check the mapping. Use `xtp_run -d mapchecker` to see all options `mapchecker` calculator takes. We use the `-c` option to change one option on the commandline."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the [mapchecker section of the manual](https://votca.github.io/xtp/mapchecker.html) you can find a table with the `mapchecker` input variables and their corresponding defaults. Finally, the following command run the check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:00.106169Z",
     "iopub.status.busy": "2025-11-01T04:45:00.105965Z",
     "iopub.status.idle": "2025-11-01T04:45:00.236602Z",
     "shell.execute_reply": "2025-11-01T04:45:00.235957Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_run, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_run -e mapchecker -c map_file=system.xml -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neighborlist Calculation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following step is to determine the neighbouring pairs for exciton transport. See the [neighborlist options](https://www.votca.org/xtp/neighborlist.html) for further information. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can run the calculation using 4 threads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:00.239754Z",
     "iopub.status.busy": "2025-11-01T04:45:00.239570Z",
     "iopub.status.idle": "2025-11-01T04:45:00.369543Z",
     "shell.execute_reply": "2025-11-01T04:45:00.368977Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_run, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_run -e neighborlist -c exciton_cutoff=0.5 constant=0.6 -f state.hdf5 -t 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read reorganization energies\n",
    "In this step we will read the in site reorganization energies and store them in the `state.hdf5` file. We just need to copy the input file and execute the calculation. The side energies have to be calculated by the user beforehand and put into an xml file. We added them to `system.xml`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:00.372428Z",
     "iopub.status.busy": "2025-11-01T04:45:00.372220Z",
     "iopub.status.idle": "2025-11-01T04:45:00.503076Z",
     "shell.execute_reply": "2025-11-01T04:45:00.502545Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_run, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_run -e einternal -c energies_file=system.xml -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute site energy\n",
    "In this step we will perform some *QMMM* calculations to compute the site energies. The `qmmm_mm.xml` file contains some predefined settings to perform the *MM* calculations. Let us first copy these settings into the state file. Instead of using the `-c` option we now use the `-o` option to read in options from an xml file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:00.505999Z",
     "iopub.status.busy": "2025-11-01T04:45:00.505810Z",
     "iopub.status.idle": "2025-11-01T04:45:00.636416Z",
     "shell.execute_reply": "2025-11-01T04:45:00.635757Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e qmmm -o qmmm_mm.xml -f state.hdf5 -j \"write\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command generates a `qmmm_mm_jobs.xml` containing 4000 *MM* jobs to compute, if you examine that file, it should look something like"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<jobs>\n",
    "  <job>\n",
    "    <id>0</id>\n",
    "    <tag>Methane_0:n</tag>\n",
    "    <input>\n",
    "      <site_energies>0:n</site_energies>\n",
    "      <regions>\n",
    "        <region>\n",
    "          <id>0</id>\n",
    "          <segments>0:n</segments>\n",
    "        </region>\n",
    "      </regions>\n",
    "    </input>\n",
    "    <status>AVAILABLE</status>\n",
    "  </job>    \n",
    "...\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us run just the first 4 jobs by settings all jobs `status` to `COMPLETE` except for the first four. This can be easily done with [sed](https://www.gnu.org/software/sed/manual/sed.html) as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:00.639561Z",
     "iopub.status.busy": "2025-11-01T04:45:00.639361Z",
     "iopub.status.idle": "2025-11-01T04:45:01.186930Z",
     "shell.execute_reply": "2025-11-01T04:45:01.186299Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read qmmm_mm_jobs.xml: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read qmmm_mm_jobs.xml: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read qmmm_mm_jobs.xml: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read qmmm_mm_jobs.xml: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read qmmm_mm_jobs.xml: No such file or directory\r\n"
     ]
    }
   ],
   "source": [
    "!sed -i \"s/AVAILABLE/COMPLETE/g\" qmmm_mm_jobs.xml\n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' qmmm_mm_jobs.xml\n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' qmmm_mm_jobs.xml\n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' qmmm_mm_jobs.xml\n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' qmmm_mm_jobs.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can run the jobs and save the results in the state file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:01.190245Z",
     "iopub.status.busy": "2025-11-01T04:45:01.189717Z",
     "iopub.status.idle": "2025-11-01T04:45:01.447979Z",
     "shell.execute_reply": "2025-11-01T04:45:01.447426Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e qmmm -o qmmm_mm.xml -f state.hdf5 -x 2 -j \"run\"\n",
    "!xtp_parallel -e qmmm -o qmmm_mm.xml -f state.hdf5 -j \"read\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Site energy and pair energy analysis\n",
    "In this step we generate an histogram and compute the correlation function of site energies and pair energy differences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:01.450866Z",
     "iopub.status.busy": "2025-11-01T04:45:01.450672Z",
     "iopub.status.idle": "2025-11-01T04:45:01.580475Z",
     "shell.execute_reply": "2025-11-01T04:45:01.579905Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_run, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_run -e eanalyze -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should now see a set of files prefixed with `eanalyze` containing the histrogram and correlation functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:01.583483Z",
     "iopub.status.busy": "2025-11-01T04:45:01.583272Z",
     "iopub.status.idle": "2025-11-01T04:45:01.695533Z",
     "shell.execute_reply": "2025-11-01T04:45:01.694905Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ls: cannot access 'eanalyze*': No such file or directory\r\n"
     ]
    }
   ],
   "source": [
    "!ls eanalyze*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## QM energy calculation\n",
    "Our next task is to perform the qm calculations for each segment that we have stored in the hdf5 file. The calculations take place in 3 stages: write the jobs to a file, perform the computation and finally save the results to the state file. We provided a small options file to make the computation cheaper."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:01.698638Z",
     "iopub.status.busy": "2025-11-01T04:45:01.698323Z",
     "iopub.status.idle": "2025-11-01T04:45:01.810078Z",
     "shell.execute_reply": "2025-11-01T04:45:01.809468Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <eqm help=\"Executes qm calculations for individual molecules\" section=\"sec:eqm\">\r\n",
      "    <map_file>system.xml</map_file>\r\n",
      "    <gwbse>\r\n",
      "      <gw>\r\n",
      "        <mode>G0W0</mode>\r\n",
      "      </gw>\r\n",
      "      <bse>\r\n",
      "        <exctotal>10</exctotal>\r\n",
      "      </bse>\r\n",
      "      <ranges>full</ranges>\r\n",
      "    </gwbse>\r\n",
      "    <dftpackage>\r\n",
      "      <basisset>3-21G</basisset>\r\n",
      "      <auxbasisset>aux-def2-svp</auxbasisset>\r\n",
      "    </dftpackage>\r\n",
      "  </eqm>\r\n",
      "</options>"
     ]
    }
   ],
   "source": [
    "!cat eqm.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We set the GWBSE mode to `G0W0`,  the `ranges` to `full` and the `basisset` and `auxbasisset` to `3-21G` and `aux-def2-svp`. For more information, check the [eqm calculator options](https://votca.github.io/xtp/eqm.html). For the sake of computational time let just compute the `gw` approximation and the `singlet`. You can also request the `triplet` or `all`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we will write the job in a file and enable only the first 2,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:01.813342Z",
     "iopub.status.busy": "2025-11-01T04:45:01.812844Z",
     "iopub.status.idle": "2025-11-01T04:45:02.271429Z",
     "shell.execute_reply": "2025-11-01T04:45:02.270796Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read eqm.jobs: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read eqm.jobs: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read eqm.jobs: No such file or directory\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e eqm -o eqm.xml -f state.hdf5 -s 0 -j \"write\"\n",
    "!sed -i \"s/AVAILABLE/COMPLETE/g\" eqm.jobs\n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' eqm.jobs\n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' eqm.jobs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let run these 2 jobs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:02.274356Z",
     "iopub.status.busy": "2025-11-01T04:45:02.274156Z",
     "iopub.status.idle": "2025-11-01T04:45:02.406432Z",
     "shell.execute_reply": "2025-11-01T04:45:02.405827Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e eqm -o eqm.xml -f state.hdf5 -x 2 -s 0 -j run -q 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## QM calculation for pairs\n",
    "In the following step we will run QM calculations for each pair in the hdf5 file. As the calculations on the previous step, we will first write the jobs in a file, then run them and finally store the results in the state file. First, we need to copy the input to our local folder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As in the previous section, we set the GWBSE mode to `G0W0`, the `ranges` to `full` and the `basisset` and `auxbasisset` to `3-21G` and `aux-def2-svp`. But we compute only the `gw` approximation, as the BSE is formed in the coupling step only once and we do not have to diagonalize it. For more information, check the [iqm calculator options](https://www.votca.org/xtp/iqm.html). We only compute the `singlet` couplings. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before running the calculations, we need to specify in the `iqm` input which states to read into the jobfile for each segment type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:02.409951Z",
     "iopub.status.busy": "2025-11-01T04:45:02.409348Z",
     "iopub.status.idle": "2025-11-01T04:45:02.521518Z",
     "shell.execute_reply": "2025-11-01T04:45:02.520838Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <iqm help=\"Executes qm calculations for individual molecules\" section=\"sec:eqm\">\r\n",
      "    <map_file>system.xml</map_file>\r\n",
      "    <gwbse>\r\n",
      "      <tasks>gw</tasks>\r\n",
      "      <gw>\r\n",
      "        <mode>G0W0</mode>\r\n",
      "      </gw>\r\n",
      "      <ranges>full</ranges>\r\n",
      "    </gwbse>\r\n",
      "    <dftpackage>\r\n",
      "      <basisset>3-21G</basisset>\r\n",
      "      <auxbasisset>aux-def2-svp</auxbasisset>\r\n",
      "    </dftpackage>\r\n",
      "    <bsecoupling>\r\n",
      "      <spin>singlet</spin>\r\n",
      "    </bsecoupling>\r\n",
      "    <readjobfile help=\"which states to read into the jobfile for each segment type\">\r\n",
      "      <singlet>Methane:s1</singlet>\r\n",
      "      <triplet>Methane:t1</triplet>\r\n",
      "      <electron>Methane:e1</electron>\r\n",
      "      <hole>Methane:h1</hole>\r\n",
      "    </readjobfile>\r\n",
      "  </iqm>\r\n",
      "</options>"
     ]
    }
   ],
   "source": [
    "!cat iqm.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's write the jobs to the file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:02.524577Z",
     "iopub.status.busy": "2025-11-01T04:45:02.524374Z",
     "iopub.status.idle": "2025-11-01T04:45:02.655783Z",
     "shell.execute_reply": "2025-11-01T04:45:02.655232Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e iqm -o iqm.xml -f state.hdf5 -s 0 -j \"write\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the jobs that we just write down, let's make available only the first job"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:02.658635Z",
     "iopub.status.busy": "2025-11-01T04:45:02.658431Z",
     "iopub.status.idle": "2025-11-01T04:45:02.879538Z",
     "shell.execute_reply": "2025-11-01T04:45:02.878911Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read iqm.jobs: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read iqm.jobs: No such file or directory\r\n"
     ]
    }
   ],
   "source": [
    "!sed -i \"s/AVAILABLE/COMPLETE/g\" iqm.jobs\n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' iqm.jobs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can run and store the jobs results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:02.882853Z",
     "iopub.status.busy": "2025-11-01T04:45:02.882335Z",
     "iopub.status.idle": "2025-11-01T04:45:03.014755Z",
     "shell.execute_reply": "2025-11-01T04:45:03.014069Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e iqm -o iqm.xml -f state.hdf5 -x 2 -s 0 -j run -q 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we read the results into the state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:03.017984Z",
     "iopub.status.busy": "2025-11-01T04:45:03.017521Z",
     "iopub.status.idle": "2025-11-01T04:45:03.149431Z",
     "shell.execute_reply": "2025-11-01T04:45:03.148800Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e iqm -o iqm.xml -f state.hdf5 -j \"read\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coupling\n",
    "We can now compute the classical coupling of transition in the aformentioned three stages,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to change in the `iexcitoncl` input the name `map_file` option and add the state. check all the available of the [iexcitoncl calculator](https://www.votca.org/xtp/iexcitoncl.html). We do this via the commandline using the `-c` option."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:03.152621Z",
     "iopub.status.busy": "2025-11-01T04:45:03.152401Z",
     "iopub.status.idle": "2025-11-01T04:45:03.283804Z",
     "shell.execute_reply": "2025-11-01T04:45:03.283255Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e iexcitoncl -c map_file=system.xml states=Methane:n2s1 -f state.hdf5 -j \"write\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:03.286630Z",
     "iopub.status.busy": "2025-11-01T04:45:03.286426Z",
     "iopub.status.idle": "2025-11-01T04:45:03.397967Z",
     "shell.execute_reply": "2025-11-01T04:45:03.397331Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "head: cannot open 'exciton.jobs' for reading: No such file or directory\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 15 exciton.jobs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can run and save the jobs. For demo purposes we will run only the first job"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:03.401635Z",
     "iopub.status.busy": "2025-11-01T04:45:03.401175Z",
     "iopub.status.idle": "2025-11-01T04:45:03.750336Z",
     "shell.execute_reply": "2025-11-01T04:45:03.749677Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read exciton.jobs: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read exciton.jobs: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!sed -i \"s/AVAILABLE/COMPLETE/g\" exciton.jobs\n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' exciton.jobs\n",
    "!xtp_parallel -e iexcitoncl -c map_file=system.xml states=Methane:n2s1 -f state.hdf5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:03.753472Z",
     "iopub.status.busy": "2025-11-01T04:45:03.753254Z",
     "iopub.status.idle": "2025-11-01T04:45:03.885768Z",
     "shell.execute_reply": "2025-11-01T04:45:03.885161Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e iexcitoncl -c map_file=system.xml -f state.hdf5 -j \"read\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coupling analysis\n",
    "Using the coupling computed in the previous steps, we will generate an histogram for the squared couplings in logarithmic scale,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:03.888643Z",
     "iopub.status.busy": "2025-11-01T04:45:03.888445Z",
     "iopub.status.idle": "2025-11-01T04:45:04.019842Z",
     "shell.execute_reply": "2025-11-01T04:45:04.019321Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_run, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_run -e ianalyze -c states=e,h,s -f state.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## QMMM calculations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally let us run a proper qmmm calculation using the qmmm calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:04.022767Z",
     "iopub.status.busy": "2025-11-01T04:45:04.022578Z",
     "iopub.status.idle": "2025-11-01T04:45:04.134054Z",
     "shell.execute_reply": "2025-11-01T04:45:04.133408Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <qmmm help=\"Executes qmmm calculations for individual molecules and clusters\" section=\"sec:qmmm\">\r\n",
      "    <print_regions_pdb help=\"print the geometry of the regions to a pdb file\">true</print_regions_pdb>\r\n",
      "    <max_iterations help=\"max iterations for qmmm scf loop\">50</max_iterations>\r\n",
      "    <map_file help=\"xml file with segment definition\">system.xml</map_file>\r\n",
      "    <job_file help=\"name of jobfile to which jobs are written\">qmmm_jobs.xml</job_file>\r\n",
      "    <io_jobfile>\r\n",
      "    <states>n s1 t1</states>\r\n",
      "    </io_jobfile>\r\n",
      "    <regions>\r\n",
      "      <qmregion help=\"definition of a region\">\r\n",
      "        <id help=\"id of a region has to start from 0\">0</id>\r\n",
      "        <gwbse>\r\n",
      "          <gw>\r\n",
      "            <mode>G0W0</mode>\r\n",
      "          </gw>\r\n",
      "          <bse>\r\n",
      "            <exctotal>10</exctotal>\r\n",
      "          </bse>\r\n",
      "          <ranges>full</ranges>\r\n",
      "        </gwbse>\r\n",
      "        <dftpackage>\r\n",
      "          <basisset>3-21G</basisset>\r\n",
      "          <auxbasisset>aux-def2-svp</auxbasisset>\r\n",
      "        </dftpackage>\r\n",
      "        <statetracker>\r\n",
      "          <overlap>0.8</overlap>\r\n",
      "        </statetracker>\r\n",
      "        <state help=\"qmstate to calculate i.e. n or s1\">jobfile</state>\r\n",
      "        <segments help=\"which segments to include in this region and which geometry they have\">jobfile</segments>\r\n",
      "      </qmregion>\r\n",
      "      <polarregion>\r\n",
      "        <id>1</id>\r\n",
      "        <cutoff>\r\n",
      "          <geometry>n</geometry>\r\n",
      "          <radius>1</radius>\r\n",
      "          <region>0</region>\r\n",
      "        </cutoff>\r\n",
      "      </polarregion>\r\n",
      "      <staticregion>\r\n",
      "        <id>2</id>\r\n",
      "        <cutoff>\r\n",
      "          <geometry>n</geometry>\r\n",
      "          <radius>1.4</radius>\r\n",
      "          <region>0</region>\r\n",
      "        </cutoff>\r\n",
      "      </staticregion>\r\n",
      "    </regions>\r\n",
      "  </qmmm>\r\n",
      "</options>\r\n"
     ]
    }
   ],
   "source": [
    "!cat qmmm.xml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:04.136973Z",
     "iopub.status.busy": "2025-11-01T04:45:04.136773Z",
     "iopub.status.idle": "2025-11-01T04:45:04.268040Z",
     "shell.execute_reply": "2025-11-01T04:45:04.267511Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_parallel -e qmmm -o qmmm.xml -f state.hdf5 -j \"write\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets run just the first job"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:04.271292Z",
     "iopub.status.busy": "2025-11-01T04:45:04.270791Z",
     "iopub.status.idle": "2025-11-01T04:45:04.728218Z",
     "shell.execute_reply": "2025-11-01T04:45:04.727668Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read qmmm_jobs.xml: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read qmmm_jobs.xml: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sed: can't read qmmm_jobs.xml: No such file or directory\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please read and cite: https://doi.org/10.21105/joss.06864\r\n",
      "and submit bugs to https://github.com/votca/votca/issues\r\n",
      "\r\n",
      "xtp_parallel, version 2025.1-dev gitid: dca3e5a (compiled Nov  1 2025, 04:42:47)\r\n",
      "\r\n",
      "an error occurred:\r\n",
      "Could not access file state.hdf5 with permission to read.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!sed -i \"s/AVAILABLE/COMPLETE/g\" qmmm_jobs.xml                                                                                                                                                            \n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' qmmm_jobs.xml   \n",
    "!sed -i '0,/COMPLETE/s/COMPLETE/AVAILABLE/' qmmm_jobs.xml  \n",
    "!xtp_parallel -e qmmm -o qmmm.xml -x 2 -f state.hdf5 -j run"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, save the results. We could read them in but that is a bit pointless. Maybe check out how to turn a checkpoint file into an or orbfile (look at the scripts) and visualise it with the `gencube` tool. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-11-01T04:45:04.731518Z",
     "iopub.status.busy": "2025-11-01T04:45:04.730989Z",
     "iopub.status.idle": "2025-11-01T04:45:04.733980Z",
     "shell.execute_reply": "2025-11-01T04:45:04.733547Z"
    }
   },
   "outputs": [],
   "source": [
    "#!xtp_parallel -e qmmm -o OPTIONFILES/qmmm.xml -f state.hdf5 -j \"read\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
