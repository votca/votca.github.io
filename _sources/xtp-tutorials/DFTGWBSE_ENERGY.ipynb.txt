{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: c56ab53 (compiled Dec 13 2020, 03:49:01)\r\n",
      "votca_csg, version 2021-dev gitid: c56ab53 (compiled Dec 13 2020, 03:48:44)\r\n",
      "votca_tools, version 2021-dev gitid: c56ab53 (compiled Dec 13 2020, 03:48:40)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: c56ab53 (compiled Dec 13 2020, 03:49:01)\r\n",
      "votca_csg, version 2021-dev gitid: c56ab53 (compiled Dec 13 2020, 03:48:44)\r\n",
      "votca_tools, version 2021-dev gitid: c56ab53 (compiled Dec 13 2020, 03:48:40)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-12-13 3:57:31 Calculated Densities at Numerical Grid, Number of electrons is -4.35987e-08\r\n",
      "... ... 2020-12-13 3:57:31 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-12-13 3:57:33 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: 2.16771e-14\r\n",
      "... ...  RMSE of fit:  0.00273953\r\n",
      "... ...  RRMSE of fit: 0.130702\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = +0.6988 dy = -0.5185 dz = +0.4876 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = +0.7549 dy = -0.5611 dz = +0.5277 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: c56ab53 (compiled Dec 13 2020, 03:49:01)\r\n",
      "votca_csg, version 2021-dev gitid: c56ab53 (compiled Dec 13 2020, 03:48:44)\r\n",
      "votca_tools, version 2021-dev gitid: c56ab53 (compiled Dec 13 2020, 03:48:40)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.4)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
