{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2022-dev gitid: a51f5c4 (compiled Jan 15 2021, 05:45:30)\r\n",
      "votca_csg, version 2022-dev gitid: a51f5c4 (compiled Jan 15 2021, 05:45:14)\r\n",
      "votca_tools, version 2022-dev gitid: a51f5c4 (compiled Jan 15 2021, 05:45:11)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2022-dev gitid: a51f5c4 (compiled Jan 15 2021, 05:45:30)\r\n",
      "votca_csg, version 2022-dev gitid: a51f5c4 (compiled Jan 15 2021, 05:45:14)\r\n",
      "votca_tools, version 2022-dev gitid: a51f5c4 (compiled Jan 15 2021, 05:45:11)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2021-1-15 5:54:9 Calculated Densities at Numerical Grid, Number of electrons is -4.36691e-08\r\n",
      "... ... 2021-1-15 5:54:9 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2021-1-15 5:54:15 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: 2.17951e-14\r\n",
      "... ...  RMSE of fit:  0.00273952\r\n",
      "... ...  RRMSE of fit: 0.130702\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = +0.7002 dy = -0.5171 dz = +0.4871 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = +0.7564 dy = -0.5595 dz = +0.5273 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2022-dev gitid: a51f5c4 (compiled Jan 15 2021, 05:45:30)\r\n",
      "votca_csg, version 2022-dev gitid: a51f5c4 (compiled Jan 15 2021, 05:45:14)\r\n",
      "votca_tools, version 2022-dev gitid: a51f5c4 (compiled Jan 15 2021, 05:45:11)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.5)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
