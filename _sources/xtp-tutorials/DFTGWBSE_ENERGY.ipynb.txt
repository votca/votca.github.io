{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 516a5e2 (compiled Dec 15 2020, 21:12:35)\r\n",
      "votca_csg, version 2021-dev gitid: 516a5e2 (compiled Dec 15 2020, 21:07:34)\r\n",
      "votca_tools, version 2021-dev gitid: 516a5e2 (compiled Dec 15 2020, 21:07:30)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 516a5e2 (compiled Dec 15 2020, 21:12:35)\r\n",
      "votca_csg, version 2021-dev gitid: 516a5e2 (compiled Dec 15 2020, 21:07:34)\r\n",
      "votca_tools, version 2021-dev gitid: 516a5e2 (compiled Dec 15 2020, 21:07:30)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-12-15 21:22:13 Calculated Densities at Numerical Grid, Number of electrons is 4.36713e-08\r\n",
      "... ... 2020-12-15 21:22:13 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-12-15 21:22:15 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: -2.18783e-14\r\n",
      "... ...  RMSE of fit:  0.00273951\r\n",
      "... ...  RRMSE of fit: 0.130702\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = -0.7002 dy = +0.5170 dz = -0.4871 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = -0.7564 dy = +0.5595 dz = -0.5272 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 516a5e2 (compiled Dec 15 2020, 21:12:35)\r\n",
      "votca_csg, version 2021-dev gitid: 516a5e2 (compiled Dec 15 2020, 21:07:34)\r\n",
      "votca_tools, version 2021-dev gitid: 516a5e2 (compiled Dec 15 2020, 21:07:30)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.4)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAFgCAYAAACFYaNMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAAAWBUlEQVR4nO3de5CldX3n8fcHBhjlIirDilyCxDWWaEScKIrROFqKaJTCRLHUeKsiZSrGSy6LlaQwMdklITGLu1mzU+BlI0JWJAlLlHiBeImB3WEiBB2IroqAII2KjEqQgW/+OE87bds9fXqmn37O7/T7VXWqz3nO6ef37eaZD09/z+/8nlQVkqTVt9fQBUjSWmUAS9JADGBJGogBLEkDMYAlaSAGsCQNZOICOMm7k9ye5LoV2t9lSe5Mcum87ecluSbJtUkuSnJAt/3l3bZrk3w2yeNXog5Jmm/iAhh4L3DSCu7vbOCVC2x/c1U9vqp+Gvga8Kvd9q8Az+i2vx3YvIK1SNIPTVwAV9WngG/N3ZbkJ7sz2auTfDrJo5exv08A2xfYfle37wAPAKrb/tmq+nb3siuBI3bvJ5GkXZu4AF7EZuANVfVE4DeA/7ESO03yHuA24NHAf1vgJa8DPrISY0nSfOuGLmApXW/2qcAHRyerAOzXPXcq8PsLfNstVfXcpfZdVa9Jsjej8H0p8J454z6TUQA/bY9+AElaxMQHMKOz9Dur6rj5T1TVxcDFe7LzqrovyV8Bv0kXwEl+GjgXeF5VfXNP9i9Ji5n4FkTXq/1Kkl+EUc92T2cmdPt45Ox94OeB67vHRzEK9VdW1b/uUfGStAuZtNXQklwA/BxwCPAN4EzgcuBdwGHAPsCFVbVQ62Gh/X2aUY/3AOCbjNoKHwM+DRwEBLgGeH1V3ZXkXODFwI3dLnZU1cYV+eEkaY6JC2BJWismvgUhSdNqot6EO+mkk+qyyy4bugxJWmlZaONEnQHfcccdQ5cgSatmogJYktYSA1iSBmIAS9JADGBJGogBLEkDMYAlaSAGsCQNxACWpIEYwJI0EANYkgZiAEvSQJoO4H+79z5OPOty3n/ljUu/WJImTNMBXAW33Hk3371nx9ClSNKyNR3AktSyqQhgL+ohqUVNB3AWXOJYktrQdABLUssMYEkayFQEcGETWFJ7piKAJalFBrAkDcQAlqSBTEUAOw9YUouaDmDnAUtqWdMBLEktM4AlaSBNB3CwByGpXU0HsCS1zACWpIFMRQCX89AkNajpAHYamqSWNR3AktQyA1iSBjIVAWwLWFKLmg5gW8CSWtZrACd5c5LPJ7kuyQVJ1vc5niS1pLcATnI48GvAxqp6LLA3cFofY9mBkNSivlsQ64AHJFkHPBD4+kruPM5Dk9Sw3gK4qm4B/gT4GnAr8J2q+uj81yU5PcmWJFtmZmb6KkeSJk6fLYgHAy8CHgE8HNg/ySvmv66qNlfVxqrauGHDhr7KkaSJ02cL4tnAV6pqpqruBS4GntrHQE5Dk9SiPgP4a8AJSR6YUbP2WcC2lRzADrCklvXZA74KuAjYCvxLN9bmvsaTpNas63PnVXUmcGafY0hSq5r+JNysciawpAY1HcBOA5bUsqYDWJJaNhUB7DQ0SS1qOoD9KLKkljUdwJLUMgNYkgYyFQFsC1hSi6YigCWpRQawJA3EAJakgUxHADsRWFKDmg9gpwJLalXzASxJrZqKALYBIalFzQewHQhJrWo+gCWpVQawJA1kKgLYWWiSWtR8ALskpaRWNR/AktQqA1iSBjIVAexVkSW1qPkAtgMsqVXNB7AktWoqAthpaJJa1HwAOwtNUquaD2BJapUBLEkDmYoAtgUsqUXNB3CciCapUc0HsCS1ygCWpIFMRQA7D1hSi9oPYFvAkhrVfgBLUqOmIoBdDU1Si5oPYDsQklrVfABLUqsMYEkayHQEsC1gSQ1qPoBdjlJSq5oPYElqlQEsSQOZigC2BSypRc0HsMtRSmpV8wEsSa2aigAul0OT1KDmA9hpaJJa1XwAS1KrDGBJGkivAZzk4CQXJbk+ybYkT+ljHFvAklq0ruf9nwNcVlW/kGRf4IErPYAtYEmt6i2AkxwEPB14NUBV/QD4QV/jSVJr+mxBHAPMAO9J8s9Jzk2yf4/jSVJT+gzgdcDxwLuq6gnA94Az5r8oyelJtiTZMjMzs1sD2QKW1KI+A/hm4Oaquqp7fBGjQP4RVbW5qjZW1cYNGzYse5A4EVhSo3oL4Kq6DbgpyU91m54FfKGv8SSpNX3PgngDcH43A+LLwGv6GMRpaJJa1GsAV9XngI19jmEDQlKr/CScJA3EAJakgUxFAJcT0SQ1qP0AtgksqVHtB7AkNWoqAthpaJJaNBUBLEktaj6AbQFLalXzASxJrTKAJWkgzQewq6FJalXzASxJrTKAJWkgUxHA5URgSQ0aaznKJCcCbwN+ovueAFVVx/RX2nhsAUtq1bjrAZ8HvBm4Grivv3Ikae0YN4C/U1Uf6bWSPWADQlKLxg3gK5KcDVwM3DO7saq29lLVMtiBkNSqcQP4yd3XuZcXKmDTypYjSWvHWAFcVc/suxBJWmvGvihnkucDxwLrZ7dV1e/3UdRyOQtNUovGmgec5C+AlzK6zHyAX2Q0JW1wfhRZUqvG/SDGU6vql4BvV9XvAU8BjuyvLEmafuMG8N3d1+8neThwL/CIfkqSpLVh3B7wpUkOBs4GtjKaAXFuX0Utl1dFltSicWdBvL27+6EklwLrq+o7/ZU1PjvAklq1ywBOsqmqLk9y6gLPUVUX91eaJE23pc6AnwFcDvz8As8Vo0/GDc5paJJatMsArqozu6+vWZ1yls9ZaJJaNe484DcmOSgj5ybZmuQ5fRcnSdNs3Glor62qu4DnAIcCrwHO6q0qSVoDxg3g2T/0TwbeU1XXMEETEGwBS2rRuAF8dZKPMgrgv09yIHB/f2Utx8T8f0CSlmXcD2K8DjgO+HJVfT/JQxi1ISRJu2ncM+CnADdU1Z1JXgH8DjARH8SQpFaNG8DvYrQOxOOB3wJuBP5Xb1Utk/OAJbVo3ADeUaNrv78IOKeqzgEO7K+s8TkPWFKrxu0Bb0/yVuAVwNOT7A3s019ZkjT9xj0Dfimji3G+rqpuAw5ntDLahLAHIak9466GdhvwjjmPv8aE9IDtQEhq1VgBnGQ7O08z92XUfvhuVT2or8IkadqNewb8I2+4JTkFeFIfBUnSWjFuD/hHVNXfAJtWtpTd5zQ0SS0atwUxd0H2vYCNTMg7X05Dk9SqcaehzV2QfQfwVUZzgiVJu2ncHrDrPkjSChu3BbGe0YI8xwLrZ7dX1Wt7qmtZ7AFLatG4b8L9JfAw4LnAJ4EjgO19FbUccSawpEaNG8CPrKrfBb5XVe8Dng88rr+yJGn6jRvA93Zf70zyWOBBwNG9VLQbajImZEjSsow7C2JzkgcDvwtcAhzQ3R+c09AktWrcWRDndnc/CRzTXzmStHbsMoCTHAEcXVWf6R6/hdHZL8AHqupLSw3QLV25Bbilql6wh/VK0tRYqgd8NnDwnMe/DHyP0afgfm/MMd4IbFt2ZcvgNDRJLVoqgH+qqi6d8/j7VfWnVfV24Kildt6dQT8fOHep1+4uW8CSWrVUAK+f9/hZc+4/dIz9/1dG15CbkEvYS9LkWCqAtyd51OyDqvoWQJJHA9/d1TcmeQFwe1VdvcTrTk+yJcmWmZmZMcuWpPYtFcBnApcmeVWSx3W3VzOainbmEt97IvDCJF8FLgQ2JXn//BdV1eaq2lhVGzds2LD8n4AJWZZNkpZplwFcVZcBpzJqPby3u20CTq2qjyzxvW+tqiOq6mjgNODyqnrFCtT8I+JEYEmNWnIecFVdB/zS7OMke7FzKpokaTeN9VHkJB9IclCS/YEvADck+c1xB6mqf+hzDrDT0CS1aNy1IB5TVXcBpwAfZjQF7ZV9FSVJa8G4AbxPkn0YBfDfVtW9+N6XJO2RcQP4fzK6DNH+wKeS/ARwV19FSdJaMO5iPO8E3jln041JntlPScvncpSSWjTum3APTfLOJFuTXJ3kHEZrAg/OWWiSWjVuC+JCYAZ4MfAL3f2/6qsoSVoLxl2Q/SHdAjyz/iDJKT3UI0lrxrhnwFckOS3JXt3tJcDf9VnYstgCltSgcQP4l4HzgXu624XAW5JsTzLobAh7wJJaNW4APwh4NfD2qtqH0QU5n11VB1bVQT3VJklTbdwA/nPgBOBl3ePtwH/vpaLdYAdCUovGfRPuyVV1fJJ/BqiqbyfZt8e6xhaviSGpUeOeAd/bXVyzAJJswKtcSNIeGTeA3wn8NXBokj8EPgP8596qkqQ1YNyPIp+f5GpGC7MHOKWqer3S8XKU61FKatC4PWCq6nrg+h5r2S1OQ5PUqnFbEJKkFWYAS9JApiKA7QBLalHzAWwLWFKrmg9gSWrVVASws9Aktaj5AI7z0CQ1qvkAlqRWGcCSNJCpCGBbwJJa1HwA2wGW1KrmA1iSWmUAS9JApiKAXY5SUovaD2CbwJIa1X4AS1KjpiKAbUBIalHzAWwHQlKrmg9gSWqVASxJA5mOALYJLKlBzQewy1FKalXzASxJrTKAJWkgUxHAZRNYUoOaD2A7wJJa1XwAS1KrpiKAXQxNUouaD2BnoUlqVfMBLEmtMoAlaSBTEcD2gCW1qPkAjhPRJDWq+QCWpFYZwJI0kKkIYD+KLKlFvQVwkiOTXJFkW5LPJ3ljP+P0sVdJ6t+6Hve9A/j1qtqa5EDg6iQfq6ov9DimJDWjtzPgqrq1qrZ297cD24DD+xmrj71KUr9WpQec5GjgCcBVCzx3epItSbbMzMysRjmSNBF6D+AkBwAfAt5UVXfNf76qNlfVxqrauGHDhr7LkaSJ0WsAJ9mHUfieX1UX9zmWJLWmz1kQAc4DtlXVO/oaB7wosqQ29XkGfCLwSmBTks91t5NXehCviiypVb1NQ6uqz+AVgyRpUVPxSThJatFUBLDzgCW1qPkAtschqVXNB7AktWpKAtgehKT2NB/AzkKT1KrmA1iSWmUAS9JApiKAnYYmqUXNB7A9YEmtaj6AJalVBrAkDWQqAtgWsKQWNR/A8cPIkhrVfABLUqumIoDLeWiSGtR8ADsNTVKrmg9gSWqVASxJA5mKALYDLKlFzQewLWBJrWo+gCWpVQawJA1kKgLYacCSWtR+ADsRWFKj2g9gSWrUVASwHQhJLWo+gG1ASGpV8wEsSa0ygCVpIFMRwC5HKalFzQews9Aktar5AJakVhnAkjQQA1iSBtJ8ANsCltSq5gNYklo1FQHsLDRJLWo+gOM8NEmNaj6AJalVBrAkDWQqArhckFJSg5oPYDvAklrVfABLUqsMYEkayFQEsPOAJbWo+QB2GrCkVjUfwJLUqqkIYFsQklrUfADHiWiSGtV8AEtSqwxgSRpIrwGc5KQkNyT5UpIz+hhjr71gx/3397FrSepVbwGcZG/gz4HnAY8BXpbkMSs9ziEH7Mcd3/3BSu9Wknq3rsd9Pwn4UlV9GSDJhcCLgC+s5CCHHriej3/nG7z3H7/i2sCSenXy4w5jw4H7rdj++gzgw4Gb5jy+GXjy/BclOR04HeCoo45a9iCPPfwg/u3e+3nb/1nRXJekH/P4Iw9uJoAXOh39sRm7VbUZ2AywcePGZc/oPfX4I3jusQ/jnh32gSX168D1KxuZfQbwzcCRcx4fAXy9j4H2328d+6/c/5QkaVX0OQvi/wH/MckjkuwLnAZc0uN4ktSU3s6Aq2pHkl8F/h7YG3h3VX2+r/EkqTV9tiCoqg8DH+5zDElqlZ+Ek6SBGMCSNBADWJIGYgBL0kAMYEkaiAEsSQMxgCVpIAawJA0kNUFXtEwyA9w40PCHAHcMNPZCJqkea1ncJNVjLYsbup47quqk+RsnKoCHlGRLVW0cuo5Zk1SPtSxukuqxlsVNWj2zbEFI0kAMYEkaiAG80+ahC5hnkuqxlsVNUj3WsrhJqwewByxJg/EMWJIGYgBL0kDWZAAneXeS25NcN2fbQ5J8LMkXu68PHrCWs5Ncn+TaJH+d5ODVqGWxeuY89xtJKskhQ9aS5A1Jbkjy+SR/vBq1LFZPkuOSXJnkc0m2JHnSKtRxZJIrkmzrfgdv7LYPdQwvVs+qH8eL1TLn+VU9hpdUVWvuBjwdOB64bs62PwbO6O6fAfzRgLU8B1jX3f+j1aplsXq67UcyurzUjcAhA/5ungl8HNive3zowMfNR4HndfdPBv5hFeo4DDi+u38g8K/AYwY8hherZ9WP48Vq6R6v+jG81G1NngFX1aeAb83b/CLgfd399wGnDFVLVX20qnZ0D69kdEXpVbHI7wbgz4DfAlbtXdtFank9cFZV3dO95vaB6yngoO7+g+jpyt/z6ri1qrZ297cD24DDGe4YXrCeIY7jXfxuYIBjeClrMoAX8R+q6lYY/UcEDh24nlmvBT4yZAFJXgjcUlXXDFlH51HAzya5Ksknk/zMwPW8CTg7yU3AnwBvXc3BkxwNPAG4igk4hufVM9eqH8dza5mwY/iHer0op/ZMkt8GdgDnD1jDA4HfZvTn5CRYBzwYOAH4GeB/Jzmmur8xB/B64M1V9aEkLwHOA569GgMnOQD4EPCmqroryWoMO3Y9c7av+nE8t5Zu7Ek6hn/IM+CdvpHkMIDu66r9abuQJK8CXgC8fMBwAfhJ4BHANUm+yujPyK1JHjZQPTcDF9fI/wXuZ7TQylBeBVzc3f8g0PubcABJ9mEUMOdX1ez4gx3Di9QzyHG8QC2Tdgz/kAG80yWM/jHRff3boQpJchLwn4AXVtX3h6oDoKr+paoOraqjq+poRgF4fFXdNlBJfwNsAkjyKGBfhl3l6uvAM7r7m4Av9j1gRqe65wHbquodc54a5BherJ4hjuOFapnAY3inod8FHOIGXADcCtzL6D/G64CHAp9g9A/oE8BDBqzlS8BNwOe6218M+buZ9/xXWb1ZEAv9bvYF3g9cB2wFNg183DwNuBq4hlHf84mrUMfTGL2RdO2cY+TkAY/hxepZ9eN4sVqGOoaXuvlRZEkaiC0ISRqIASxJAzGAJWkgBrAkDcQAlqSBGMCaCknu61Ykm72dMee5i5Ics4vvfVuS/zJv23FJtnX3P75aK4tpbTGANS3urqrj5tzOAkhyLLB3VX15F997AfDSedtOAz7Q3f9L4FdWvGKteQawpt3LmfOJsCTPSfJPSbYm+WCSA6rqBuDOJE+e830vAS7s7l8CvGz1StZaYQBrWjxgXgti9oz2REafVKNbhPt3gGdX1fHAFuAt3esuYHTWS5ITgG9W1RcBqurbwH5JHrp6P47WAldD07S4u6qOW2D7YcBMd/8ERguF/2O3cti+wD91z10IfDbJrzMK4gvm7ed24OHAN1e2bK1lBrCm3d3A+u5+gI9V1Y+1E6rqpm6lrGcALwaeMu8l67t9SSvGFoSm3Tbgkd39K4ETkzwSRmsddyuqzbqA0VUT/n9V3Ty7sVth62GMFnGRVowBrGkxvwd8Vrf974CfA6iqGeDVwAVJrmUUyI+es48PAsey8823WU8Erqydl9eRVoSroWmqJXkAcAVwYlXdt5v7OAe4pKo+saLFac3zDFhTraruBs5k54UZd8d1hq/64BmwJA3EM2BJGogBLEkDMYAlaSAGsCQNxACWpIH8O8QLXBunw/+NAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
