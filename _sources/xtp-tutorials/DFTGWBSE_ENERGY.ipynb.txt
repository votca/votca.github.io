{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 3cdea71 (compiled Jan  1 2021, 05:28:19)\r\n",
      "votca_csg, version 2021-dev gitid: 3cdea71 (compiled Jan  1 2021, 05:28:05)\r\n",
      "votca_tools, version 2021-dev gitid: 3cdea71 (compiled Jan  1 2021, 05:28:03)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 3cdea71 (compiled Jan  1 2021, 05:28:19)\r\n",
      "votca_csg, version 2021-dev gitid: 3cdea71 (compiled Jan  1 2021, 05:28:05)\r\n",
      "votca_tools, version 2021-dev gitid: 3cdea71 (compiled Jan  1 2021, 05:28:03)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2021-1-1 5:35:25 Calculated Densities at Numerical Grid, Number of electrons is 4.36599e-08\r\n",
      "... ... 2021-1-1 5:35:25 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2021-1-1 5:35:27 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: -2.17881e-14\r\n",
      "... ...  RMSE of fit:  0.00273954\r\n",
      "... ...  RRMSE of fit: 0.130703\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = -0.7000 dy = +0.5173 dz = -0.4871 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = -0.7562 dy = +0.5597 dz = -0.5272 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 3cdea71 (compiled Jan  1 2021, 05:28:19)\r\n",
      "votca_csg, version 2021-dev gitid: 3cdea71 (compiled Jan  1 2021, 05:28:05)\r\n",
      "votca_tools, version 2021-dev gitid: 3cdea71 (compiled Jan  1 2021, 05:28:03)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.4)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
