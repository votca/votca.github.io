{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 6391cd7 (compiled Dec 21 2020, 19:56:23)\r\n",
      "votca_csg, version 2021-dev gitid: 6391cd7 (compiled Dec 21 2020, 19:56:02)\r\n",
      "votca_tools, version 2021-dev gitid: 6391cd7 (compiled Dec 21 2020, 19:55:48)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 6391cd7 (compiled Dec 21 2020, 19:56:23)\r\n",
      "votca_csg, version 2021-dev gitid: 6391cd7 (compiled Dec 21 2020, 19:56:02)\r\n",
      "votca_tools, version 2021-dev gitid: 6391cd7 (compiled Dec 21 2020, 19:55:48)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-12-21 20:3:32 Calculated Densities at Numerical Grid, Number of electrons is 4.36389e-08\r\n",
      "... ... 2020-12-21 20:3:32 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-12-21 20:3:34 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: -2.17118e-14\r\n",
      "... ...  RMSE of fit:  0.0027395\r\n",
      "... ...  RRMSE of fit: 0.130703\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = -0.6995 dy = +0.5177 dz = -0.4873 |d|^2 = +0.9948\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = -0.7557 dy = +0.5602 dz = -0.5274 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 6391cd7 (compiled Dec 21 2020, 19:56:23)\r\n",
      "votca_csg, version 2021-dev gitid: 6391cd7 (compiled Dec 21 2020, 19:56:02)\r\n",
      "votca_tools, version 2021-dev gitid: 6391cd7 (compiled Dec 21 2020, 19:55:48)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.4)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
