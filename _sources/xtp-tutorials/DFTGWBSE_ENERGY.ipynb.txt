{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: c62ee8e (compiled Dec 15 2020, 17:45:29)\r\n",
      "votca_csg, version 2021-dev gitid: c62ee8e (compiled Dec 15 2020, 17:44:53)\r\n",
      "votca_tools, version 2021-dev gitid: c62ee8e (compiled Dec 15 2020, 17:44:50)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: c62ee8e (compiled Dec 15 2020, 17:45:29)\r\n",
      "votca_csg, version 2021-dev gitid: c62ee8e (compiled Dec 15 2020, 17:44:53)\r\n",
      "votca_tools, version 2021-dev gitid: c62ee8e (compiled Dec 15 2020, 17:44:50)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-12-15 17:52:45 Calculated Densities at Numerical Grid, Number of electrons is -4.36712e-08\r\n",
      "... ... 2020-12-15 17:52:45 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-12-15 17:52:47 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: 2.17604e-14\r\n",
      "... ...  RMSE of fit:  0.00273951\r\n",
      "... ...  RRMSE of fit: 0.130702\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = +0.7002 dy = -0.5171 dz = +0.4870 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = +0.7565 dy = -0.5595 dz = +0.5271 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: c62ee8e (compiled Dec 15 2020, 17:45:29)\r\n",
      "votca_csg, version 2021-dev gitid: c62ee8e (compiled Dec 15 2020, 17:44:53)\r\n",
      "votca_tools, version 2021-dev gitid: c62ee8e (compiled Dec 15 2020, 17:44:50)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.4)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
