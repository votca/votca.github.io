{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 02a0f21 (compiled Jan 12 2021, 13:08:44)\r\n",
      "votca_csg, version 2021-dev gitid: 02a0f21 (compiled Jan 12 2021, 13:04:03)\r\n",
      "votca_tools, version 2021-dev gitid: 02a0f21 (compiled Jan 12 2021, 13:03:13)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 02a0f21 (compiled Jan 12 2021, 13:08:44)\r\n",
      "votca_csg, version 2021-dev gitid: 02a0f21 (compiled Jan 12 2021, 13:04:03)\r\n",
      "votca_tools, version 2021-dev gitid: 02a0f21 (compiled Jan 12 2021, 13:03:13)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2021-1-12 13:16:59 Calculated Densities at Numerical Grid, Number of electrons is -4.36809e-08\r\n",
      "... ... 2021-1-12 13:16:59 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2021-1-12 13:17:1 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: 2.17812e-14\r\n",
      "... ...  RMSE of fit:  0.0027395\r\n",
      "... ...  RRMSE of fit: 0.1307\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = +0.7003 dy = -0.5168 dz = +0.4872 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = +0.7565 dy = -0.5593 dz = +0.5273 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 02a0f21 (compiled Jan 12 2021, 13:08:44)\r\n",
      "votca_csg, version 2021-dev gitid: 02a0f21 (compiled Jan 12 2021, 13:04:03)\r\n",
      "votca_tools, version 2021-dev gitid: 02a0f21 (compiled Jan 12 2021, 13:03:13)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.5)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
