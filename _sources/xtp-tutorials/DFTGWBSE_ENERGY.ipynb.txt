{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 1a652bf (compiled Jan  8 2021, 22:27:14)\r\n",
      "votca_csg, version 2021-dev gitid: 1a652bf (compiled Jan  8 2021, 22:14:12)\r\n",
      "votca_tools, version 2021-dev gitid: 1a652bf (compiled Jan  8 2021, 22:12:09)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 1a652bf (compiled Jan  8 2021, 22:27:14)\r\n",
      "votca_csg, version 2021-dev gitid: 1a652bf (compiled Jan  8 2021, 22:14:12)\r\n",
      "votca_tools, version 2021-dev gitid: 1a652bf (compiled Jan  8 2021, 22:12:09)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2021-1-8 22:39:24 Calculated Densities at Numerical Grid, Number of electrons is -4.36617e-08\r\n",
      "... ... 2021-1-8 22:39:24 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2021-1-8 22:39:26 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: 2.1802e-14\r\n",
      "... ...  RMSE of fit:  0.00273956\r\n",
      "... ...  RRMSE of fit: 0.130704\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = +0.7001 dy = -0.5171 dz = +0.4872 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = +0.7563 dy = -0.5596 dz = +0.5273 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 1a652bf (compiled Jan  8 2021, 22:27:14)\r\n",
      "votca_csg, version 2021-dev gitid: 1a652bf (compiled Jan  8 2021, 22:14:12)\r\n",
      "votca_tools, version 2021-dev gitid: 1a652bf (compiled Jan  8 2021, 22:12:09)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.5)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
