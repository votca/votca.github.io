{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 95d1c35 (compiled Jan  9 2021, 01:16:59)\r\n",
      "votca_csg, version 2021-dev gitid: 95d1c35 (compiled Jan  9 2021, 01:16:33)\r\n",
      "votca_tools, version 2021-dev gitid: 95d1c35 (compiled Jan  9 2021, 01:16:30)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 95d1c35 (compiled Jan  9 2021, 01:16:59)\r\n",
      "votca_csg, version 2021-dev gitid: 95d1c35 (compiled Jan  9 2021, 01:16:33)\r\n",
      "votca_tools, version 2021-dev gitid: 95d1c35 (compiled Jan  9 2021, 01:16:30)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2021-1-9 1:24:39 Calculated Densities at Numerical Grid, Number of electrons is -4.36607e-08\r\n",
      "... ... 2021-1-9 1:24:39 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2021-1-9 1:24:41 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: 2.17396e-14\r\n",
      "... ...  RMSE of fit:  0.00273955\r\n",
      "... ...  RRMSE of fit: 0.130703\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = +0.7000 dy = -0.5171 dz = +0.4874 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = +0.7562 dy = -0.5596 dz = +0.5275 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 95d1c35 (compiled Jan  9 2021, 01:16:59)\r\n",
      "votca_csg, version 2021-dev gitid: 95d1c35 (compiled Jan  9 2021, 01:16:33)\r\n",
      "votca_tools, version 2021-dev gitid: 95d1c35 (compiled Jan  9 2021, 01:16:30)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.5)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
