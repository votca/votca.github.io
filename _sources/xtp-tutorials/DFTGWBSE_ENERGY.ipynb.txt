{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: c396be1 (compiled Dec 12 2020, 01:20:24)\r\n",
      "votca_csg, version 2021-dev gitid: c396be1 (compiled Dec 12 2020, 01:20:08)\r\n",
      "votca_tools, version 2021-dev gitid: c396be1 (compiled Dec 12 2020, 01:20:04)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: c396be1 (compiled Dec 12 2020, 01:20:24)\r\n",
      "votca_csg, version 2021-dev gitid: c396be1 (compiled Dec 12 2020, 01:20:08)\r\n",
      "votca_tools, version 2021-dev gitid: c396be1 (compiled Dec 12 2020, 01:20:04)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-12-12 1:28:40 Calculated Densities at Numerical Grid, Number of electrons is 4.36659e-08\r\n",
      "... ... 2020-12-12 1:28:40 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-12-12 1:28:42 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: -2.17118e-14\r\n",
      "... ...  RMSE of fit:  0.00273953\r\n",
      "... ...  RRMSE of fit: 0.130703\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = -0.7001 dy = +0.5171 dz = -0.4871 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = -0.7564 dy = +0.5596 dz = -0.5272 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: c396be1 (compiled Dec 12 2020, 01:20:24)\r\n",
      "votca_csg, version 2021-dev gitid: c396be1 (compiled Dec 12 2020, 01:20:08)\r\n",
      "votca_tools, version 2021-dev gitid: c396be1 (compiled Dec 12 2020, 01:20:04)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.4)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
