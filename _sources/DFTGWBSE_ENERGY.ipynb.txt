{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: e4c7d89 (compiled Dec  2 2020, 23:39:29)\r\n",
      "votca_csg, version 2021-dev gitid: e4c7d89 (compiled Dec  2 2020, 23:38:58)\r\n",
      "votca_tools, version 2021-dev gitid: e4c7d89 (compiled Dec  2 2020, 23:38:39)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: e4c7d89 (compiled Dec  2 2020, 23:39:29)\r\n",
      "votca_csg, version 2021-dev gitid: e4c7d89 (compiled Dec  2 2020, 23:38:58)\r\n",
      "votca_tools, version 2021-dev gitid: e4c7d89 (compiled Dec  2 2020, 23:38:39)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-12-2 23:48:47 Calculated Densities at Numerical Grid, Number of electrons is -4.35958e-08\r\n",
      "... ... 2020-12-2 23:48:47 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-12-2 23:48:50 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: 2.16285e-14\r\n",
      "... ...  RMSE of fit:  0.00273957\r\n",
      "... ...  RRMSE of fit: 0.130705\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = +0.6987 dy = -0.5187 dz = +0.4875 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = +0.7548 dy = -0.5613 dz = +0.5276 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: e4c7d89 (compiled Dec  2 2020, 23:39:29)\r\n",
      "votca_csg, version 2021-dev gitid: e4c7d89 (compiled Dec  2 2020, 23:38:58)\r\n",
      "votca_tools, version 2021-dev gitid: e4c7d89 (compiled Dec  2 2020, 23:38:39)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.9598 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.4)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
