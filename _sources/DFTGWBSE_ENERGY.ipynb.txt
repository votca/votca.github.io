{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.md)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: b4471b8 (compiled Sep  2 2020, 12:23:30)\r\n",
      "votca_csg, version 2021-dev gitid: b4471b8 (compiled Sep  2 2020, 12:23:09)\r\n",
      "votca_tools, version 2021-dev gitid: b4471b8 (compiled Sep  2 2020, 12:23:06)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        List of tools separated by ',' or ' '\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: b4471b8 (compiled Sep  2 2020, 12:23:30)\r\n",
      "votca_csg, version 2021-dev gitid: b4471b8 (compiled Sep  2 2020, 12:23:09)\r\n",
      "votca_tools, version 2021-dev gitid: b4471b8 (compiled Sep  2 2020, 12:23:06)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges \r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-9-2 12:32:2 Calculated Densities at Numerical Grid, Number of electrons is 2.37575e-08\r\n",
      "... ... 2020-9-2 12:32:2 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-9-2 12:32:4 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: -2.42792e-14\r\n",
      "... ...  RMSE of fit:  0.00221588\r\n",
      "... ...  RRMSE of fit: 0.107182\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = -0.7282 dy = +0.4708 dz = -0.4705 |d|^2 = +0.9733\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = -0.7625 dy = +0.4935 dz = -0.4931 |d|^2 = +1.0680\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: b4471b8 (compiled Sep  2 2020, 12:23:30)\r\n",
      "votca_csg, version 2021-dev gitid: b4471b8 (compiled Sep  2 2020, 12:23:09)\r\n",
      "votca_tools, version 2021-dev gitid: b4471b8 (compiled Sep  2 2020, 12:23:06)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum \r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 13.8471 eV / min wave length 89.9395 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.8/site-packages (0.9.0)\r\n",
      "Requirement already satisfied: numpy>=1.9.3 in /usr/lib64/python3.8/site-packages (from seaborn) (1.18.4)\r\n",
      "Requirement already satisfied: scipy>=0.14.0 in /usr/lib64/python3.8/site-packages (from seaborn) (1.4.1)\r\n",
      "Requirement already satisfied: pandas>=0.15.2 in /usr/lib64/python3.8/site-packages (from seaborn) (0.25.3)\r\n",
      "Requirement already satisfied: matplotlib>=1.4.3 in /usr/lib64/python3.8/site-packages (from seaborn) (3.2.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2.8.0)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2020.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (1.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.8/site-packages (from python-dateutil>=2.6.1->pandas>=0.15.2->seaborn) (1.14.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
