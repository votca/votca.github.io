{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.md)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 62e9061 (compiled Oct 12 2020, 21:07:53)\r\n",
      "votca_csg, version 2021-dev gitid: 62e9061 (compiled Oct 12 2020, 20:47:05)\r\n",
      "votca_tools, version 2021-dev gitid: 62e9061 (compiled Oct 12 2020, 20:42:59)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        List of tools separated by ',' or ' '\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 62e9061 (compiled Oct 12 2020, 21:07:53)\r\n",
      "votca_csg, version 2021-dev gitid: 62e9061 (compiled Oct 12 2020, 20:47:05)\r\n",
      "votca_tools, version 2021-dev gitid: 62e9061 (compiled Oct 12 2020, 20:42:59)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-10-12 22:30:30 Calculated Densities at Numerical Grid, Number of electrons is 2.37645e-08\r\n",
      "... ... 2020-10-12 22:30:30 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-10-12 22:30:33 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: -2.41508e-14\r\n",
      "... ...  RMSE of fit:  0.00221584\r\n",
      "... ...  RRMSE of fit: 0.107182\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = -0.7282 dy = +0.4710 dz = -0.4704 |d|^2 = +0.9733\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = -0.7624 dy = +0.4937 dz = -0.4930 |d|^2 = +1.0680\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 62e9061 (compiled Oct 12 2020, 21:07:53)\r\n",
      "votca_csg, version 2021-dev gitid: 62e9061 (compiled Oct 12 2020, 20:47:05)\r\n",
      "votca_tools, version 2021-dev gitid: 62e9061 (compiled Oct 12 2020, 20:42:59)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 13.8471 eV / min wave length 89.9395 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.8/site-packages (0.9.0)\r\n",
      "Requirement already satisfied: numpy>=1.9.3 in /usr/lib64/python3.8/site-packages (from seaborn) (1.18.4)\r\n",
      "Requirement already satisfied: scipy>=0.14.0 in /usr/lib64/python3.8/site-packages (from seaborn) (1.4.1)\r\n",
      "Requirement already satisfied: pandas>=0.15.2 in /usr/lib64/python3.8/site-packages (from seaborn) (0.25.3)\r\n",
      "Requirement already satisfied: matplotlib>=1.4.3 in /usr/lib64/python3.8/site-packages (from seaborn) (3.2.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2.8.0)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2020.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (1.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.8/site-packages (from python-dateutil>=2.6.1->pandas>=0.15.2->seaborn) (1.14.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
