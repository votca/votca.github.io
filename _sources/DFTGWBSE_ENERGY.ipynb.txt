{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.md)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 73d86fe (compiled Sep 18 2020, 11:48:44)\r\n",
      "votca_csg, version 2021-dev gitid: 73d86fe (compiled Sep 18 2020, 11:34:41)\r\n",
      "votca_tools, version 2021-dev gitid: 73d86fe (compiled Sep 18 2020, 11:31:58)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        List of tools separated by ',' or ' '\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 73d86fe (compiled Sep 18 2020, 11:48:44)\r\n",
      "votca_csg, version 2021-dev gitid: 73d86fe (compiled Sep 18 2020, 11:34:41)\r\n",
      "votca_tools, version 2021-dev gitid: 73d86fe (compiled Sep 18 2020, 11:31:58)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges \r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-9-18 12:1:29 Calculated Densities at Numerical Grid, Number of electrons is 2.37569e-08\r\n",
      "... ... 2020-9-18 12:1:29 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-9-18 12:1:31 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: -2.42271e-14\r\n",
      "... ...  RMSE of fit:  0.00221571\r\n",
      "... ...  RRMSE of fit: 0.107176\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = -0.7279 dy = +0.4712 dz = -0.4706 |d|^2 = +0.9733\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = -0.7621 dy = +0.4939 dz = -0.4932 |d|^2 = +1.0680\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 73d86fe (compiled Sep 18 2020, 11:48:44)\r\n",
      "votca_csg, version 2021-dev gitid: 73d86fe (compiled Sep 18 2020, 11:34:41)\r\n",
      "votca_tools, version 2021-dev gitid: 73d86fe (compiled Sep 18 2020, 11:31:58)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum \r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 13.8471 eV / min wave length 89.9395 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.8/site-packages (0.9.0)\r\n",
      "Requirement already satisfied: numpy>=1.9.3 in /usr/lib64/python3.8/site-packages (from seaborn) (1.18.4)\r\n",
      "Requirement already satisfied: scipy>=0.14.0 in /usr/lib64/python3.8/site-packages (from seaborn) (1.4.1)\r\n",
      "Requirement already satisfied: pandas>=0.15.2 in /usr/lib64/python3.8/site-packages (from seaborn) (0.25.3)\r\n",
      "Requirement already satisfied: matplotlib>=1.4.3 in /usr/lib64/python3.8/site-packages (from seaborn) (3.2.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2.8.0)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2020.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (1.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.8/site-packages (from python-dateutil>=2.6.1->pandas>=0.15.2->seaborn) (1.14.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
