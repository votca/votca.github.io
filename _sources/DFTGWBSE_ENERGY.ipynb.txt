{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.md)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: a1e07fd (compiled Oct 20 2020, 17:35:27)\r\n",
      "votca_csg, version 2021-dev gitid: a1e07fd (compiled Oct 20 2020, 17:32:35)\r\n",
      "votca_tools, version 2021-dev gitid: a1e07fd (compiled Oct 20 2020, 17:32:20)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        List of tools separated by ',' or ' '\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: a1e07fd (compiled Oct 20 2020, 17:35:27)\r\n",
      "votca_csg, version 2021-dev gitid: a1e07fd (compiled Oct 20 2020, 17:32:35)\r\n",
      "votca_tools, version 2021-dev gitid: a1e07fd (compiled Oct 20 2020, 17:32:20)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-10-20 17:54:16 Calculated Densities at Numerical Grid, Number of electrons is -2.37525e-08\r\n",
      "... ... 2020-10-20 17:54:16 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-10-20 17:54:19 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: 2.41578e-14\r\n",
      "... ...  RMSE of fit:  0.00221583\r\n",
      "... ...  RRMSE of fit: 0.107181\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = +0.7279 dy = -0.4713 dz = +0.4705 |d|^2 = +0.9733\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = +0.7621 dy = -0.4940 dz = +0.4932 |d|^2 = +1.0680\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: a1e07fd (compiled Oct 20 2020, 17:35:27)\r\n",
      "votca_csg, version 2021-dev gitid: a1e07fd (compiled Oct 20 2020, 17:32:35)\r\n",
      "votca_tools, version 2021-dev gitid: a1e07fd (compiled Oct 20 2020, 17:32:20)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 13.8471 eV / min wave length 89.9395 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.8/site-packages (0.9.0)\r\n",
      "Requirement already satisfied: numpy>=1.9.3 in /usr/lib64/python3.8/site-packages (from seaborn) (1.18.4)\r\n",
      "Requirement already satisfied: scipy>=0.14.0 in /usr/lib64/python3.8/site-packages (from seaborn) (1.4.1)\r\n",
      "Requirement already satisfied: pandas>=0.15.2 in /usr/lib64/python3.8/site-packages (from seaborn) (0.25.3)\r\n",
      "Requirement already satisfied: matplotlib>=1.4.3 in /usr/lib64/python3.8/site-packages (from seaborn) (3.2.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2.8.0)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2020.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (1.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.8/site-packages (from python-dateutil>=2.6.1->pandas>=0.15.2->seaborn) (1.14.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAFgCAYAAACFYaNMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAdEUlEQVR4nO3de5BkZ3nf8e/TPbO7ErqAxMqALgiFgAtIIWCNwLLBUigswEGU7cJQJjaGihzHScA4IRDbhTFJLCyHBMquOCrAIRikGAM2JXM1V5NwyWoDRCAwmBJGAbwrc9GKXe3OdD/545w+fWa2Z7a1O+85q+nvp2pqu3t65jwsvb969byXE5mJJKl7g74LkKRFZQBLUk8MYEnqiQEsST0xgCWpJ0t9F9B21VVX5Xvf+96+y5CkrRazXjylRsB33HFH3yVIUmdOqQCWpEViAEtSTwxgSeqJASxJPTGAJaknBrAk9cQAlqSeGMCS1BMDWJJ6YgBLUk8MYEnqiQGsNW674/vc/p1DfZchLYRT6jQ09e/HfvcjANx27TP6LURaAI6AJaknBrAa3iFb6pYBrMbBI6t9lyAtFANYjZXVcd8lSAvFAFZjNLYFIXXJAFZjpRXAY8NYKs4AVmN1NG1BrIxtR0ilGcBqrLZGvasjR8BSaQawGu3QNYCl8gxgNVZsQUidKroVOSJuAw4CI2A1M/eUvJ5OzsgWhNSpLs6CuCIz7+jgOjpJq61Rb3s0LKkMWxBqrOkBuwxNKq50ACfw/oi4OSKumfWGiLgmIvZGxN4DBw4ULkebWbsKwhGwVFrpAL48Mx8LPA345Yh40vo3ZOb1mbknM/fs3r27cDnazJpJOHvAUnFFAzgzv1H/uR94J/D4ktfTyVkzCecqCKm4YgEcEfeJiDMnj4GnAreUup5OXnvU6whYKq/kKogfAN4ZEZPrvDUz31vwejpJI3vAUqeKBXBmfhV4dKnfr63Xbju4CkIqz2VoarTbDkcdAUvFGcBqjFojYI+jlMozgNVoj4A9nF0qzwBWoz3xNvYGnVJxBrAa7Yk3W8BSeQawGmsC2BGwVJwBrMbIe8JJnTKA1WifBeEknFSeAaxG+zhKWxBSeQawGqu2IKROGcBqtJehOQKWyjOA1XAELHXLAFZjdTymOrzOSTipCwawGqujZOdS9ZHwOGCpPANYjdVxsmNYfSRsQUjlGcBqjMbJjmYEbABLpRnAaowzWa5HwPaApfIMYDVG42kA24KQyjOA1ciEpWG1DMIWhFSeAazGaJwsDaoAdgQslWcAqzHOZBDBcBCOgKUOGMBqNAEc4YHsUgcMYDXGCcNBMBh4SyKpCwawGqNxMgjqEbABLJVmAKsxzmQwCAYDA1jqggGsRnsSzhaEVJ4BrMZ4XLUfbEFI3TCA1RhlEgEDR8BSJwxgNcbjZDhwBCx1xQBWY5x1AA9cByx1wQBWY5QQ4TpgqSsGsBqZydB1wFJnDGA1qo0Y9TpgR8BScQawGuOsVkAMIzwNTeqAAazGeLIV2Z1wUicMYDUmqyAiXAcsdcEAVqPaiBEMB94TTuqCAaxGZmsrsvkrFWcAqzE5jnIwCNIWhFScAazGaJzNKghbEFJ5BrAa1UYMzwOWumIAqzFq3RPOVRBSeQawGs1GDEfAUicMYDXGrUk4V0FI5RUP4IgYRsT/iYibSl9LJ6c5jjJwK7LUgS5GwC8Cbu3gOjpJk8N4bEFI3SgawBFxAfAM4PUlr6OtkUl1GpqTcFInSo+A/zPwUsD7K9wLVKsgPIxH6kqxAI6InwD2Z+bNx3nfNRGxNyL2HjhwoFQ5msOkB+x5wFI3So6ALweeGRG3ATcCV0bEH61/U2Zen5l7MnPP7t27C5aj4xmPq1sSeR6w1I1iAZyZL8/MCzLzYuA5wIcy83mlrqeTN8pkOKhbEI6ApeJcB6zGuN4JF1GNhiWVtdTFRTLzI8BHuriWTkxmNqsg3IosdcMRsIBqGzJU7YfhwACWumAAC5jeAWMQ1UTcyBaEVJwBLIBmxFsdxoMHsksdMIAFtAK43gnnKgipPANYQKsHPAlg1wFLxRnAAqY94Ki3IjsAlsozgAVMe77DQTAIb0svdcEAFtBeBVGdBeEyNKk8A1gAzaTbYOBxlFJXDGABND3fQeBt6aWOGMACpi2IYdOC6LkgaQEYwALWbsQYRP2aKSwVZQALmJ5+NjmMB7APLBVmAAuYhu1wUI2CAXfDSYUZwAJaqyDqnXDgmcBSaQawgOlGjOq29NVrtiCksgxgATTHT7ZHwLYgpLIMYAHresB1AKctCKkoA1hA+zCe6TI0R8BSWQawgOlOuGFUtyQCD+SRSjOABbTPgpguQ/OuGFJZBrCAdaehOQkndcIAFrD2PODpTrg+K5K2PwNYwNoRcHgWhNQJA1jAdLQ7cBJO6owBLKB9V2SaAHYnnFSWASygvREjCE9DkzphAAtYuxHDSTipGwawgNZGjNaB7PaApbIMYAHtVRCt84ANYKkoA1hAexJuuhHDFrBUlgEsYG0AT84DdiecVJYBLGB6HnDVA3YVhNQFA1jA7POA3QknlWUAC5gGcLgTTuqMASygNQJunwVh/kpFGcAC1t4TbmgPWOqEASygtQpi4FkQUlcMYAHTCbfqOEp7wFIXluZ5U0RcDvwm8OD6ZwLIzLykXGnq0ri1FXk4cCOG1IW5Ahh4A/ArwM3AqFw56suoWQWBZ0FIHZk3gL+Xme8pWol6la1VEN4TTurGvAH84Yi4DngHcGTyYmbuK1KVOte+JdHQuyJLnZg3gC+r/9zTei2BK7e2HPWlCeDWVuTJ0jRJZcwVwJl5xT39xRGxC/gYsLO+zp9k5ivu6e9RN3LNJFz12GVoUlnzjoCJiGcAjwR2TV7LzN/a5EeOAFdm5l0RsQx8PCLek5mfPOFqVcyodU84b0kkdWPeZWh/AJwOXAG8Hvhp4NOb/UxWDcS76qfL9Zf/ok9Ra46jdB2w1Il5N2L8cGb+HPCdzHwl8ETgwuP9UEQMI+IzwH7gA5n5qRMvVSWNZ0zCmb9SWfMG8OH6z0MR8SBgBXjI8X4oM0eZeSlwAfD4iHjU+vdExDURsTci9h44cGDeurXF2hsxmsN4TGCpqHkD+KaIuC9wHbAPuA24cd6LZOZ3gY8AV8343vWZuScz9+zevXveX6kt1r4nnGdBSN2YdxXEq+qHb4+Im4Bdmfm9zX4mInYDK5n53Yg4DXgK8OqTqlbFjDOJegLOjRhSNzYN4Ii4MjM/FBE/OeN7ZOY7NvnxBwJviogh1Uj7jzPzppMrV6WMM5vJN++IIXXjeCPgJwMfAv7RjO8l1c64mTLzc8BjTrw0dWk0ngavk3BSNzYN4MnGicz8hW7KUV/GmQzqGQEP45G6MdckXES8KCLOisrrI2JfRDy1dHHqznjcakE4CSd1Yt5VEC/IzDuBpwLnAb8AXFusKnVulNm0ILwtvdSNeQO4/o9Sng78YWZ+tvWatoHxOJuR79DDeKROzBvAN0fE+6kC+H0RcSbgP89tZJzTybeBh/FInZj3MJ4XApcCX83MQxFxDlUbQttE1YKoHrsMTerGvCPgJwJfqjdVPA/4dWDTjRi6dxmPpz3g6W3p+6xI2v7mDeD/QnUOxKOBlwJfA/57sarUuXFrEm5yFoQ74aSy5g3g1fp4yauB12bma4Ezy5Wlro3G0x5wtR3ZFoRU2rw94IMR8XLgecCT6u3Fy+XKUteytREDqjB2Ek4qa94R8M9Q3eHihZn5LeB8qpPRtE201wFDNQq2BSGVNe9paN8CXtN6/jfYA95WRq2dcFBNxJm/Ulnz3pLoINPbCe2gaj/clZlnlypM3cqcbkGG6jwIz4KQypp3BLxmwi0ingU8vkhF6sVoPF0HDFUYG8BSWfP2gNfIzD8FrtziWtSj9T3gQXXec48VSdvfvC2I9oHsA2AP3uF4W8nMZhkaVKsgnISTypp3GVr7QPZVqnvCXb3l1ag3o/GxI2A7EFJZ8/aAPfdhmxvNmIRzI4ZU1rwtiF1UB/I8Etg1eT0zX1CoLnUsMxm2JuGGTsJJxc07Cfdm4AHAjwMfBS4ADpYqSt2zBSF1b94Afmhm/gbw/cx8E/AM4B+UK0tdq+4J1wrggecBS6XNG8Ar9Z/fjYhHAWcDFxepSL0Yj1mzDngYngUhlTbvKojrI+J+wG8A7wLOqB9rmxhlstw6jWcQ9oCl0uZdBfH6+uFHgUvKlaO+jNdvxBh4FoRU2qYBHBEXABdn5sfr5y+hGv0CvDUzv1K4PnVkfMwknGdBSKUdrwd8HXDf1vNfBL5PtQvulaWKUvdG63bCDTyOUirueC2Ih2fmTa3nhzLzPwJExF+WK0tdqybh1m5F9iwIqazjjYB3rXv+D1uPz93iWtSjca47Dc1JOKm44wXwwYh42ORJZn4bICJ+ELirZGHq1mi8rgUxcCOGVNrxWhCvAG6KiH8P7Ktfexzwb4EXlSxM3TpmI0a4EUMqbdMAzsz31kdRvhT4l/XLnwd+MjNvKV2cujPOdT1gWxBSccddB1wH7c9NnkfEgOlSNG0T1T3hps8H3hVZKm6urcgR8daIOCsi7gN8AfhSRPzrsqWpSzNbEOMeC5IWwLxnQTwiM+8EngW8G7gI+MfFqlLn1m/EGDoCloqbN4CXI2KZKoD/LDNX8JZE28o4WXNbejdiSOXNG8D/leo2RPcBPhYRDwbuLFWUujfKpHUWT3UesJNwUlHzHsbzOuB1rZe+FhFXlClJfZjdguixIGkBzDsJd25EvC4i9kXEzRHxWqozgbVNjI85C8LDeKTS5m1B3AgcAH4K+On68f8oVZS6N/uWRAawVNK8B7Kfk5mvaj3/dxHxrBIFqR/rN2IYwFJ5846APxwRz4mIQf31bODPSxamblUtiOlz74oslTdvAP8i8BbgSP11I/CSiDgYEa6G2AaOaUF4RwypuHkD+Gzg+cCrMnOZ6oacT8nMMzPzrEK1qUOzdsK5Dlgqa94A/n3gCcBz6+cHgd8rUpF6sX4jhndFlsqbN4Avy8xfBu4GyMzvADs2+4GIuDAiPhwRt0bE5yPC4ytPYVULYvo8IjwLQips3lUQKxExpN5+HBG7geP981wFfjUz90XEmcDNEfGBzPzCiZerEiY73totiOHAdcBSafOOgF8HvBM4rz6c/ePAf9jsBzLzm5m5r358ELgVOP8kalUhk1aDy9Ckbs27FfktEXEz1T3hAnhWZt4670Ui4mLgMcCnTqBGFTaZbDv2lkQGsFTSvC0IMvOLwBfv6QUi4gzg7cCL6yMt13//GuAagIsuuuie/nptgUnOrr8jhh0Iqax5WxAnpD7C8u3AWzLzHbPek5nXZ+aezNyze/fukuVoA5Ne79q7ItsDlkorFsAREcAbgFsz8zWlrqOTt2ELwgCWiio5Ar6c6q4ZV0bEZ+qvpxe8nk5Q1utZnISTujV3D/ieysyPU03Y6RQ3ymNbEMOBd8SQSivaA9a9w6TXu/Y8YCfhpNIMYJF57EaM6q7IJrBUkgGsVgvCuyJLXTKANW1BtAI46hZEGsJSMQawphsxBms3YgD2gaWCDGDN3IgxuTuGbQipHANYMzdiRD0CdjecVI4BrKbPG+sm4arv9VKStBAMYDGqd8INY+0yNPC2RFJJBrCaPm/7rsgDWxBScQawmpCd3YIwgKVSDGBNR8DrDuMBR8BSSQawmrW+64+jbH9P0tYzgNVqQUxfm2Sx64ClcgxgtSbhjt0JZwtCKscAVnPq2ZoecNOCMIClUgxgNWt9Y8Yk3HjcS0nSQjCA1YTsmhaEZ0FIxRnA2nwjhgEsFWMA6zgtCANYKsUA1sxJuKHrgKXiDGA1ITuYdRiPCSwVYwBreiD7jB6wk3BSOQawZm7EMICl8gxgNSPgpcGxPWBbEFI5BrCmd0Vu9SA8jEcqzwAWqzNGwB7GI5VnAItRvRVu5m3pHQJLxRjAau4JtzTrrsiOgKViDGA1I+DhjEk4D+ORyjGANbMH3KyCcAQsFWMAq7UKYhrAkzBeHTkElkoxgNUaAU8/DpMwXnUSTirGANbMEfByfTalGzGkcgxgsTrauAfsCFgqxwAWo/GYiLXrgJearcj2gKVSDGCxOs41ZwHDdAS8MnIELJViAIvRONf0f8EesNQFA1iMxrmm/wv2gKUuGMCqWhDrArjpAbsOWCrGAFY1Ah6u/SgMh46ApdIMYG06AjaApXIMYDEaj4/pAU92xTkJJ5VjAGvzEbDL0KRiDGDNXAUxGAQRbsSQSioWwBHxxojYHxG3lLqGtsbqONfsgptYGoQ9YKmgkiPg/wZcVfD3a4uMRseOgKFaC2wAS+UUC+DM/Bjw7VK/X1tnlLnmjsgTy4OBPWCpoN57wBFxTUTsjYi9Bw4c6LuchTSrBwzVWmB7wFI5vQdwZl6fmXsyc8/u3bv7LmchzVoFAfaApdJ6D2D1b9Y6YKh6wK4DlsoxgMXqaKMR8MDjKKWCSi5DuwH4BPDwiLg9Il5Y6lo6OdVZEDMC2B6wVNRSqV+cmc8t9bu1tVbHyekzVkG4DE0qyxaENlwFsWQPWCrKAFa1Ey5mTcLZA5ZKMoC14SqIagRsD1gqxQBWdU+4DSbh7AFL5RjAsgcs9cQA1oY74VwFIZVlAKtqQcyYhFsaDFj1ppxSMQawOLo6ZsfS7HXAtiCkcgxgcXQ0Znk44zhKJ+GkogxgcXR1zE5HwFLnDOAFl5kcHc1uQSwNBxy1BywVYwAvuNE4yWRmC2LncMDRVQNYKsUAXnCTEe6sEfCOJQNYKskAXnArq1WPd8eMEfCOpQFHDGCpGAN4wR0ZjQBYnjEC3ukIWCrKAF5wk4DducEI2Ek4qRwDeMFNjptcXjp2J9yO4ZDROF2KJhViAC+4yQh4x3B4zPcmE3O2IaQyDOAF1wTwBqsgAI6sjjqtSVoUBvCCm/R4l2ecB7zTEbBUlAG84OYbARvAUgkG8IJbmWzEmLUTbjICdiWEVIQBvOA2HQEPbUFIJRnAC26zrcg7l21BSCUZwAtupZmEmzUCrpamOQKWyjCAF9yR1Y17wK4DlsoygBfcZAQ860D2JoBHrgOWSjCAF9xkdDu7BVH3gFccAUslGMALbrNVEJNJOJehSWUYwAvu0NGqvbBrecZZEENXQUglGcAL7vDKiF3LA4aDY7ciT0L57hV7wFIJBvCCO3R0ldN3LM383pm7qtcP3r3aZUnSwjCAF9yhoyNOm9F+gGplxPIwuOuIASyVYAAvuMNHR5y+Y3YARwRn7Fzi4N0rHVclLQYDeMEd2iSAAc7ctcxdtiCkIgzgBff9I6vcZ+fsHjDAGTuXbEFIhRjAC+7Ou1c4+7TlDb9/xq4l7nQELBVhAC+4Ow+vctaujQP4rF1LtiCkQgzgBXfn3SucddrmLYiDR5yEk0owgBfY0dUxh46ONh0BOwknlWMAL7ADdx0BYPeZOzd8z/1OX+Z7h1eaU9MkbR0DeIHtv/NuAM47a+MAvuCc0xknfOO7h7sqS1oYBvAC+9tJAJ+5a8P3XHi/0wH4+rcNYGmrGcAL7K8PfB+Ai+9/nw3fc9G5VQD/zbcPdVKTtEiKBnBEXBURX4qIr0TEy0peS/fcF755J+ff9zTO2GQjxgPO2sWOpQFf2X9Xh5VJi6FYAEfEEPh94GnAI4DnRsQjSl1v0WTmmq/xePo1an2tjsbN10rra//Bu/nLvzrAEy45d9PrDAfBZQ85h/d9/lueCSFtsY2HPifv8cBXMvOrABFxI3A18IWtusDhoyOeeO0Hm+eZtB5Pn2T7h3LmwzXvP/Z77ddzg9c3usa63zvH9Te69lZbGgTP/+GLj/u+f/Kjl/D8P/w0l/7WBzhtecjSMDj29GBp+3vzCy/jUeefvWW/r2QAnw98vfX8duCy9W+KiGuAawAuuuiie3SB4SC4+tEPWv/7Zr63/XI7Pta+vsnPtJ6sed/J/t55fmaDa6//nzrP75q8HhFc8fDzeMSDzuJ4nvSw3bztnz6RD31xP4ePjlkduyRNi2mzbfsnomQAz0rCY8ZzmXk9cD3Anj177tF4b8fSgFde/agTq073yOMefA6Pe/A5fZchbSslJ+FuBy5sPb8A+EbB60nSvUrJAP7fwN+PiIdExA7gOcC7Cl5Pku5VirUgMnM1Iv458D5gCLwxMz9f6nqSdG9TsgdMZr4beHfJa0jSvZU74SSpJwawJPXEAJaknhjAktQTA1iSemIAS1JPDGBJ6okBLEk9ifXHMPYpIg4AX+vp8vcH7ujp2rOcSvVYy8ZOpXqsZWN913NHZl61/sVTKoD7FBF7M3NP33VMnEr1WMvGTqV6rGVjp1o9E7YgJKknBrAk9cQAnrq+7wLWOZXqsZaNnUr1WMvGTrV6AHvAktQbR8CS1BMDWJJ6spABHBFvjIj9EXFL67VzIuIDEfHl+s/79VjLdRHxxYj4XES8MyLu20UtG9XT+t6/ioiMiPv3WUtE/IuI+FJEfD4ifqeLWjaqJyIujYhPRsRnImJvRDy+gzoujIgPR8St9d/Bi+rX+/oMb1RP55/jjWppfb/Tz/BxZebCfQFPAh4L3NJ67XeAl9WPXwa8usdangos1Y9f3VUtG9VTv34h1e2lvgbcv8e/myuAvwB21s/P6/lz837gafXjpwMf6aCOBwKPrR+fCfwV8IgeP8Mb1dP553ijWurnnX+Gj/e1kCPgzPwY8O11L18NvKl+/CbgWX3Vkpnvz8zV+uknqe4o3YkN/m4A/hPwUqCzWdsNavkl4NrMPFK/Z3/P9SRwVv34bDq483dmfjMz99WPDwK3AufT32d4Zj19fI43+buBHj7Dx7OQAbyBH8jMb0L1fyJwXs/1TLwAeE+fBUTEM4H/l5mf7bOO2sOAH42IT0XERyPih3qu58XAdRHxdeB3gZd3efGIuBh4DPApToHP8Lp62jr/HLdrOcU+w42iN+XUyYmIXwNWgbf0WMPpwK9R/efkqWAJuB/wBOCHgD+OiEuy/m/MHvwS8CuZ+faIeDbwBuApXVw4Is4A3g68ODPvjIguLjt3Pa3XO/8ct2upr30qfYYbjoCn/jYiHghQ/9nZf9rOEhE/D/wE8LM9hgvA3wMeAnw2Im6j+s/IfRHxgJ7quR14R1Y+DYypDlrpy88D76gfvw0oPgkHEBHLVAHzlsycXL+3z/AG9fTyOZ5Ry6n2GW4YwFPvovrHRP3nn/VVSERcBfwb4JmZeaivOgAy8/9m5nmZeXFmXkwVgI/NzG/1VNKfAlcCRMTDgB30e8rVN4An14+vBL5c+oJRDXXfANyama9pfauXz/BG9fTxOZ5Vyyn4GZ7qexawjy/gBuCbwArV/xkvBM4FPkj1D+iDwDk91vIV4OvAZ+qvP+jz72bd92+ju1UQs/5udgB/BNwC7AOu7Plz8yPAzcBnqfqej+ugjh+hmkj6XOsz8vQeP8Mb1dP553ijWvr6DB/vy63IktQTWxCS1BMDWJJ6YgBLUk8MYEnqiQEsST0xgLUtRMSoPpFs8vWy1vf+JCIu2eRnfzMifnvda5dGxK3147/o6mQxLRYDWNvF4cy8tPV1LUBEPBIYZuZXN/nZG4CfWffac4C31o/fDPyzLa9YC88A1nb3s7R2hEXEUyPiExGxLyLeFhFnZOaXgO9GxGWtn3s2cGP9+F3Ac7srWYvCANZ2cdq6FsRkRHs51U416kO4fx14SmY+FtgLvKR+3w1Uo14i4gnA32XmlwEy8zvAzog4t7v/OVoEnoam7eJwZl464/UHAgfqx0+gOij8f9Ynh+0APlF/70bgf0XEr1IF8Q3rfs9+4EHA321x3VpgBrC2u8PArvpxAB/IzGPaCZn59fqkrCcDPwU8cd1bdtW/S9oytiC03d0KPLR+/Eng8oh4KFRnHdcnqk3cQHXXhL/OzNsnL9YnbD2A6hAXacsYwNou1veAr61f/3PgxwAy8wDwfOCGiPgcVSD/YOt3vA14JNPJt4nHAZ/M6e11pC3haWja1iLiNODDwOWZOTrB3/Fa4F2Z+cEtLU4LzxGwtrXMPAy8gumNGU/ELYavSnAELEk9cQQsST0xgCWpJwawJPXEAJaknhjAktST/w/du/1O5oxhZgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
