{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.rst)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: d1a0120 (compiled Dec  8 2020, 02:58:38)\r\n",
      "votca_csg, version 2021-dev gitid: d1a0120 (compiled Dec  8 2020, 02:52:50)\r\n",
      "votca_tools, version 2021-dev gitid: d1a0120 (compiled Dec  8 2020, 02:51:59)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        name of the tool to run\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: d1a0120 (compiled Dec  8 2020, 02:58:38)\r\n",
      "votca_csg, version 2021-dev gitid: d1a0120 (compiled Dec  8 2020, 02:52:50)\r\n",
      "votca_tools, version 2021-dev gitid: d1a0120 (compiled Dec  8 2020, 02:51:59)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges  Using 1 threads\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-12-8 3:10:10 Calculated Densities at Numerical Grid, Number of electrons is 4.36688e-08\r\n",
      "... ... 2020-12-8 3:10:10 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-12-8 3:10:13 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: -2.18367e-14\r\n",
      "... ...  RMSE of fit:  0.00273952\r\n",
      "... ...  RRMSE of fit: 0.130703\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = -0.7001 dy = +0.5171 dz = -0.4871 |d|^2 = +0.9949\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = -0.7564 dy = +0.5595 dz = -0.5273 |d|^2 = +1.1632\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: d1a0120 (compiled Dec  8 2020, 02:58:38)\r\n",
      "votca_csg, version 2021-dev gitid: d1a0120 (compiled Dec  8 2020, 02:52:50)\r\n",
      "votca_tools, version 2021-dev gitid: d1a0120 (compiled Dec  8 2020, 02:51:59)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum  Using 1 threads\r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 6.95981 eV / min wave length 179.923 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.9/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: numpy>=1.13.3 in /usr/lib64/python3.9/site-packages (from seaborn) (1.19.4)\r\n",
      "Requirement already satisfied: scipy>=1.0.1 in /usr/lib64/python3.9/site-packages (from seaborn) (1.5.2)\r\n",
      "Requirement already satisfied: pandas>=0.22.0 in /usr/lib64/python3.9/site-packages (from seaborn) (1.0.5)\r\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /usr/lib64/python3.9/site-packages (from seaborn) (3.3.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2.8.1)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.9/site-packages (from pandas>=0.22.0->seaborn) (2020.4)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (1.3.1)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (7.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/lib/python3.9/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil>=2.6.1->pandas>=0.22.0->seaborn) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
