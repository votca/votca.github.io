{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFT + GWBSE Energy Calculation Using CH4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial explains how to perform calculation to predict electronic excitation using the **GWBSE** method. See [the GW Compendium: A Practical Guide to Theoretical Photoemission Spectroscopy](https://doi.org/10.3389/fchem.2019.00377), for an excellent introduction to the method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements\n",
    "* You will need to install **VOTCA** using the instructions described [here](https://github.com/votca/votca/blob/master/share/doc/INSTALL.md)\n",
    "* Once the installation is completed you need to activate the VOTCA enviroment by running the `VOTCARC.bash` script that has been installed at the bin subfolder for the path that you have provided for the installation step above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interacting with the XTP command line interface\n",
    "To run a DFT-GWBSE calculation we will use the [xtp_tools](https://votca.github.io/xtp_tools.html) calculator. Run the following command to view the help message of `xtp_tools`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 5b85d49 (compiled Aug 22 2020, 03:50:22)\r\n",
      "votca_csg, version 2021-dev gitid: 5b85d49 (compiled Aug 22 2020, 03:50:03)\r\n",
      "votca_tools, version 2021-dev gitid: 5b85d49 (compiled Aug 22 2020, 03:50:00)\r\n",
      "\r\n",
      "Runs excitation/charge transport tools\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Allowed options:\r\n",
      "  -h [ --help ]                 display this help and exit\r\n",
      "  --verbose                     be loud and noisy\r\n",
      "  --verbose1                    be very loud and noisy\r\n",
      "  -v [ --verbose2 ]             be extremly loud and noisy\r\n",
      "  -o [ --options ] arg          calculator options\r\n",
      "  -t [ --nthreads ] arg (=1)    number of threads to create\r\n",
      "\r\n",
      "Tools:\r\n",
      "  -e [ --execute ] arg        List of tools separated by ',' or ' '\r\n",
      "  -l [ --list ]               Lists all available tools\r\n",
      "  -d [ --description ] arg    Short description of a tool\r\n",
      "  -n [ --name ] arg           Name of the job to run\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!xtp_tools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "> * In Jupyter the `!` symbol means: *run the following command as a standard unix command*\n",
    "> * In Jupyter the command `%env` set an environmental variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation with the default options\n",
    "To run a DFT-GWBSE calculation we just need to provide the path to the file in XYZ with the molecular coordinates. Check the [dftgwbse defaults](https://votca.github.io/dftgwbse.html) for further information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous command will run the DFT-GWBSE calculation using the aforementioned defaults and the results are store in the *Current Work Directory* in a file named `methane_summary.xml`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running a calculation using your own input file\n",
    "Let create a folder to store the input `options` for XTP and copy the defaults in there"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p OPTIONFILES\n",
    "!cp $VOTCASHARE/xtp/xml/dftgwbse.xml OPTIONFILES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have a *XML* file with the DFTWGSE options that looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\"?>\r\n",
      "<options>\r\n",
      "  <!-- xtp_tools -e dftgwbse options.xml -->\r\n",
      "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\r\n",
      "    <optimize help=\"Perform a molecular geometry optimization\" default=\"false\" choices=\"bool\"/>\r\n",
      "    <basisset help=\"Basis set for MOs\" default=\"def2-tzvp\"/>\r\n",
      "    <auxbasisset help=\"Auxiliary basis set for RI\" default=\"aux-def2-tzvp\"/>\r\n",
      "    <functional help=\"Functional name(s) according to LIBXC\" default=\"XC_HYB_GGA_XC_PBEH\"/>\r\n",
      "    <dftpackage>\r\n",
      "      <package>\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 10 OPTIONFILES/dftgwbse.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the folling python snippet to change the `basisset` and the `auxbasisset`,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'basisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'ubecppol'\n",
      "The option 'auxbasisset' on file 'OPTIONFILES/dftgwbse.xml' has been set to 'aux-ubecppol'\n"
     ]
    }
   ],
   "source": [
    "from xml_editor import edit_calculator\n",
    "edit_calculator(\"dftgwbse\", \"basisset\", \"ubecppol\")\n",
    "edit_calculator(\"dftgwbse\", \"auxbasisset\", \"aux-ubecppol\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can run the calculation using the `-o` command line argument, as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!xtp_tools -n methane -t 2 -e dftgwbse -o OPTIONFILES/dftgwbse.xml > dftgwbse.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "Alternatively you could have create an empty `dftgwbse.xml` file and add the `basisset` and the `auxbasisset` by hand, as follows,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```xml\n",
    "<options>\n",
    "  \n",
    "  <dftgwbse help=\"Compute electronic excitations using GW-BSE\">\n",
    "    <basisset>ubecppol</basisset>\n",
    "    <auxbasisset>aux-ubecppol</auxbasisset>\n",
    "  </dftgwbse>\n",
    "\n",
    "</options>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XTP will automatically compare the default values with the user-provided and overwrites the defaults with the user input. Also, If I given property does not have a default value you can provide one using the XML file described above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Charges\n",
    "We can compute now the partial charges using the `CHELPG` method by default. For more information see the [partialcharges documentation](https://votca.github.io/partialcharges.html). Once again, we only need to provide the name of the system to compute, which in our case is `methane`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered partialcharges==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 5b85d49 (compiled Aug 22 2020, 03:50:22)\r\n",
      "votca_csg, version 2021-dev gitid: 5b85d49 (compiled Aug 22 2020, 03:50:03)\r\n",
      "votca_tools, version 2021-dev gitid: 5b85d49 (compiled Aug 22 2020, 03:50:00)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... partialcharges Evaluating tool\r\n",
      "... partialcharges \r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ... ===== Running on 1 threads ===== \r\n",
      "... ... 2020-8-22 3:57:6 Calculated Densities at Numerical Grid, Number of electrons is 2.3754e-08\r\n",
      "... ... 2020-8-22 3:57:6 Calculating ESP at CHELPG grid points\r\n",
      "... ... 2020-8-22 3:57:8 Netcharge constrained to 0\r\n",
      "... ...  Sum of fitted charges: -2.4248e-14\r\n",
      "... ...  RMSE of fit:  0.00221583\r\n",
      "... ...  RRMSE of fit: 0.107181\r\n",
      "... ... El Dipole from fitted charges [e*bohr]:\r\n",
      "\t\t dx = -0.7279 dy = +0.4713 dz = -0.4705 |d|^2 = +0.9733\r\n",
      "... ... El Dipole from exact qm density [e*bohr]:\r\n",
      "\t\t dx = -0.7621 dy = +0.4940 dz = -0.4932 |d|^2 = +1.0680\r\n",
      "... ... Written charges to methane.mps"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e partialcharges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum Calculation\n",
    "Finally, lets compute a convolution of the singlet spectrum using a gaussian function. For doing so, we will modify the default values for the [spectrum calculator](https://votca.github.io/spectrum.html) to compute the spectrum between 9 and 25 eV, using 1000 points in that energy range. We will first grap a copy of [spectrum calculator](https://votca.github.io/spectrum.html) and the modify its values as follows,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The option 'lower' on file 'OPTIONFILES/spectrum.xml' has been set to '9'\n",
      "The option 'upper' on file 'OPTIONFILES/spectrum.xml' has been set to '25'\n",
      "The option 'points' on file 'OPTIONFILES/spectrum.xml' has been set to '1000'\n"
     ]
    }
   ],
   "source": [
    "!cp $VOTCASHARE/xtp/xml/spectrum.xml OPTIONFILES\n",
    "edit_calculator(\"spectrum\", \"lower\", \"9\")\n",
    "edit_calculator(\"spectrum\", \"upper\", \"25\")\n",
    "edit_calculator(\"spectrum\", \"points\", \"1000\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can invoke the calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registered spectrum==================================================\r\n",
      "========   VOTCA (http://www.votca.org)   ========\r\n",
      "==================================================\r\n",
      "\r\n",
      "please submit bugs to https://github.com/votca/xtp/issues\r\n",
      "\r\n",
      "xtp_tools, version 2021-dev gitid: 5b85d49 (compiled Aug 22 2020, 03:50:22)\r\n",
      "votca_csg, version 2021-dev gitid: 5b85d49 (compiled Aug 22 2020, 03:50:03)\r\n",
      "votca_tools, version 2021-dev gitid: 5b85d49 (compiled Aug 22 2020, 03:50:00)\r\n",
      "\r\n",
      "Initializing tool\r\n",
      "... spectrum Evaluating tool\r\n",
      "... spectrum \r\n",
      "... ... Calculating absorption spectrum plot methane.orb\r\n",
      "... ...  Loading QM data from methane.orb\r\n",
      "... ...  Considering 5 excitation with max energy 13.8471 eV / min wave length 89.9395 nm\r\n",
      "... ...  Spectrum in energy range from  9 to 25 eV and with broadening of FWHM 0.2 eV written to file  methane_spectrum.dat"
     ]
    }
   ],
   "source": [
    "!xtp_tools -n methane -e spectrum -o OPTIONFILES/spectrum.xml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are stored in the `methane_spectrum.dat` file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (Optional) Plot the spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use [matplotlib](https://matplotlib.org/), [seaborn](https://seaborn.pydata.org/) and [pandas](https://pandas.pydata.org/) libraries to plot the spectrum. You can install it using [pip](https://pip.pypa.io/en/stable/) like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /usr/lib/python3.8/site-packages (0.9.0)\r\n",
      "Requirement already satisfied: numpy>=1.9.3 in /usr/lib64/python3.8/site-packages (from seaborn) (1.18.4)\r\n",
      "Requirement already satisfied: scipy>=0.14.0 in /usr/lib64/python3.8/site-packages (from seaborn) (1.4.1)\r\n",
      "Requirement already satisfied: pandas>=0.15.2 in /usr/lib64/python3.8/site-packages (from seaborn) (0.25.3)\r\n",
      "Requirement already satisfied: matplotlib>=1.4.3 in /usr/lib64/python3.8/site-packages (from seaborn) (3.2.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2.8.0)\r\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3.8/site-packages (from pandas>=0.15.2->seaborn) (2020.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (0.10.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/lib64/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (1.2.0)\r\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/lib/python3.8/site-packages (from matplotlib>=1.4.3->seaborn) (2.4.7)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/lib/python3.8/site-packages (from python-dateutil>=2.6.1->pandas>=0.15.2->seaborn) (1.14.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install seaborn --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "columns = [\"E(eV)\", \"epsGaussian\",\"IM(eps)Gaussian\",  \"epsLorentz\",  \"Im(esp)Lorentz\"] \n",
    "df = pd.read_table(\"methane_spectrum.dat\", comment=\"#\", sep='\\s+',names=columns) \n",
    "sns.relplot(x=\"E(eV)\", y=\"epsGaussian\", ci=None, kind=\"line\", data=df) \n",
    "plt.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
